{"hash":"752c6ce69aa6bc2761e11346ad248f842b46c834","data":{"posts":{"totalCount":14,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"233e353d5ce5d8b3e281b4571f0b2e5d","title":"Rodando docker compose sem root e containers com live-reload no Fedora","datetime":"2023-08-14 10:00:00","content":"<p>Nos últimos dias precisei dockerizar uma aplicação divida em 3 serviços:\nmonolito legado, novo front end em React e nova API com FastAPI. Com a chegada\nde uma nova pessoa no time, resolvemos criar um docker-compose que rodasse todas\nas aplicações juntas, incluindo o banco de dados e aplicação de autenticação, o\nque facilitaria bastante o fluxo de desenvolvimento por não ter que configurar\nmanualmente todas as aplicações nem ter que subir uma por uma toda vez.</p>\n<p>Meu principal requisito era criar um docker-compose de modo que os serviços\nfossem atualizados automaticamente sem precisar buildar o container a cada\nmudança, vulgo <strong>live-reload</strong>. O método que escolhi pra fazer isso foi com\nvolumes, já que pareceu a opção mais natural: docker espelha os arquivos de uma\npasta local com os arquivos do ambiente docker, assim qualquer modificação nos\nvolumes serão compartilhadas com os containers sem a necessidade de\nreconstruir-los.</p>\n<p>Como um teste simples inicial, criei uma aplicação com FastAPI, com um único\nendpoint o mais simples possível:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\"># src/main.py</span>\n\n<span style=\"color: #D32F2F\">from</span><span style=\"color: #24292EFF\"> typing </span><span style=\"color: #D32F2F\">import</span><span style=\"color: #24292EFF\"> Optional</span>\n<span style=\"color: #D32F2F\">from</span><span style=\"color: #24292EFF\"> fastapi </span><span style=\"color: #D32F2F\">import</span><span style=\"color: #24292EFF\"> FastAPI</span>\n\n<span style=\"color: #24292EFF\">app </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">FastAPI()</span>\n\n<span style=\"color: #6F42C1\">@app.get</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #22863A\">\"/\"</span><span style=\"color: #24292EFF\">)</span>\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">read_root</span><span style=\"color: #24292EFF\">():</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">return</span><span style=\"color: #24292EFF\"> {</span><span style=\"color: #22863A\">\"Hello\"</span><span style=\"color: #24292EFF\">: </span><span style=\"color: #22863A\">\"World\"</span><span style=\"color: #24292EFF\">}</span></code></pre>\n<p>O Dockerfile também super simples, seguindo os passos da <a href=\"https://fastapi.tiangolo.com/deployment/docker/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentação do\nFastAPI</a>:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\"># Dockerfile</span>\n\n<span style=\"color: #24292EFF\">FROM python:</span><span style=\"color: #1976D2\">3.9</span>\n\n<span style=\"color: #24292EFF\">WORKDIR </span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">code</span>\n\n<span style=\"color: #24292EFF\">COPY .</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">requirements.txt </span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">code</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">requirements.txt</span>\n\n<span style=\"color: #24292EFF\">RUN pip install --no</span><span style=\"color: #D32F2F\">-</span><span style=\"color: #24292EFF\">cache</span><span style=\"color: #D32F2F\">-</span><span style=\"color: #1976D2\">dir</span><span style=\"color: #24292EFF\"> --upgrade </span><span style=\"color: #D32F2F\">-</span><span style=\"color: #24292EFF\">r </span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">code</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">requirements.txt</span>\n\n<span style=\"color: #24292EFF\">COPY .</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">app </span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">code</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">app</span>\n\n<span style=\"color: #24292EFF\">EXPOSE </span><span style=\"color: #1976D2\">8000</span>\n\n<span style=\"color: #6A737D\"># A opção --reload é que faz o servidor recarregar quando há mudanças nos arquivos</span>\n\n<span style=\"color: #24292EFF\">CMD [</span><span style=\"color: #22863A\">\"uvicorn\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"app.main:app\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"--reload\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"--host\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"0.0.0.0\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"--port\"</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"8000\"</span><span style=\"color: #24292EFF\">]</span></code></pre>\n<p>E no docker-compose, o segredo tá na configuração dos volumes:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6A737D\"># docker-compose.yml</span>\n\n<span style=\"color: #24292EFF\">version: </span><span style=\"color: #22863A\">'3.7'</span>\n\n<span style=\"color: #24292EFF\">services:</span>\n<span style=\"color: #24292EFF\">  server:</span>\n<span style=\"color: #24292EFF\">    container_name: server</span>\n<span style=\"color: #24292EFF\">    build:</span>\n<span style=\"color: #24292EFF\">      context: .</span>\n<span style=\"color: #24292EFF\">      dockerfile: Dockerfile</span>\n<span style=\"color: #24292EFF\">    volumes:</span>\n<span style=\"color: #24292EFF\">      </span><span style=\"color: #D32F2F\">-</span><span style=\"color: #24292EFF\"> .</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">app:</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">code</span><span style=\"color: #D32F2F\">/</span><span style=\"color: #24292EFF\">app</span>\n<span style=\"color: #24292EFF\">    ports:</span>\n<span style=\"color: #24292EFF\">      </span><span style=\"color: #D32F2F\">-</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #22863A\">\"8008:8008\"</span></code></pre>\n<p>Aqui estamos dizendo que a pasta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">app</code>, que nesse caso está no mesmo nível do\narquivo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">docker-compose.yml</code> vai ser espelhada na pasta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/code/app</code> dentro do\ncontainer. Se você reparar no Dockerfile eu copio a pasta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">./app</code> para\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">/code/app</code>, assim o conteúdo das duas deveria ser o mesmo e é exatamente onde\nestão os arquivos que eu modifico e que gostaria durante o desenvolvimento e que\ngostaria que o servidor recarregasse ao serem modificados.</p>\n<p>A princípio isso deveria funcionar, encontrei vários exemplos que faziam\nexatemente isso e pareciam bem simples, mas por algum motivo não funcionava pra\nmim. Assim que eu configurava o volume, as aplicações não funcionavam mais e\ninvestigando um pouco parecia que os arquivos ou não eram mais copiados para o\ncontainer ou o container não tinha permissão de lê-los.</p>\n<p>Como eu uso Fedora, no lugar Docker eu uso Podman, mas para docker compose usava\no pacote <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">docker-compose</code> mesmo e tinha que rodar docker-compose com sudo, o que\nnão era exatamente ideal já que uma das melhores vantagens do podman (além de\nser open source) é a possibilidade de rodar docker sem root. Comecei a achar que\no problema deveria estar relacionado a isso, já que tinha cara de problema de\npermissões. Depois de postergar por meses, resolvi finalmente parar pra resolver\nisso e passar a rodar docker-compose sem root. Essa foi a primeira parte da\nsolução, o que eu não contava é que em um artigo só eu acharia a solução para os\ndois problemas: <a href=\"https://brandonrozek.com/blog/rootless-docker-compose-podman/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://brandonrozek.com/blog/rootless-docker-compose-podman/</a></p>\n<p>A solução veio em duas etapas, passar a rodar o socket do podman como meu\nusuário e não mais com root:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">systemctl --user </span><span style=\"color: #1976D2\">enable</span><span style=\"color: #24292EFF\"> podman.socket</span>\n<span style=\"color: #24292EFF\">systemctl --user start podman.socket</span>\n<span style=\"color: #D32F2F\">export</span><span style=\"color: #24292EFF\"> DOCKER_HOST=unix:///run/user/$UID/podman/podman.sock</span></code></pre>\n<p>E no finalzinho do artigo, Brandon solta essa informação despretenciosamente que\nfoi o que me salvou:</p>\n<blockquote>\n<p>\"If you want to add to add more volumes to the container, make sure it has the\nappropriate SELinux label if you’re using a distribution with it enabled.\"</p>\n</blockquote>\n<p><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">chcon -t container_file_t -R &lt;volume_name&gt;</code></p>\n<p>No caso do meu exemplo, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">chcon -t container_file_t -R app</code> foi o que resolveu.</p>\n<p>Eu quebrei muita a cabeça até achar essa solução e finalmente consigo rodar\ndocker-compose sem root e usar live-reload!</p>\n<p>Segue o repositório bem simples com exemplo que descrevi:\n<a href=\"https://github.com/anarute/fastapi-live-reload\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/anarute/fastapi-live-reload</a></p>\n<p>Se quiser ler um pouco mais sobre, recomendo <a href=\"https://www.freecodecamp.org/news/how-to-enable-live-reload-on-docker-based-applications/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">esse\nartigo</a>\ndo Erick Wendel.</p>\n","excerpt":"","description":"","path":"/docker-compose-sem-root-live-reload/","cover":"","tags":[{"id":"pt-br","title":"pt-br","path":"/tag/pt-br/"},{"id":"docker","title":"docker","path":"/tag/docker/"},{"id":"fedora","title":"fedora","path":"/tag/fedora/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"19990dbc24ab8f305e1f1ee95a99f671","title":"Primeiros passos com Next.js","datetime":"2020-09-19 10:00:00","content":"<p>Cerca de 8 anos atrás (!), para um dos meus trabalhos finais da faculdade eu\ndesenvolvi um site que inicialmente era estátipo \"puro\" (HTML, CSS e js), virou\num Wordpress para que outras pessoas pudessem mexer no conteúdo e finalmente\nfoi abandonado com o passar do tempo a ponto de precisar ser removido ao ser\nhackeado - clássico fim de sites wordpress que não sofrem manutenção frequente.</p>\n<p>Recentemente uma das criadoras do projeto entrou em contato comigo para subirmos\no site novamente e como gosto muito do projeto, topei. Porém, terei que refazer\ndo zero, já que quero que novamente seja estático, sem ter que manter um CMS, nem\nme preocupar com manutençao de servidor, se o site pode ser hackeado, nada disso.</p>\n<p>Ao invés de fazer com js vanilla, resolvi aproveitar a oportunidade pra\nfazer em Next.js e tentar entender porque que esse framework está tão em alta.</p>\n<p>Antes de tudo é importante entender a diferença entre site estático, site\nrenderizado no cliente e renderizado no servidor. Pra isso recomendo <a href=\"https://www.youtube.com/watch?v=X3W-YFe2_io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">o excelente\nvideo do Willian Justen</a>, ele explica de forma super didática essas diferenças e quando usar cada um.</p>\n<h2 id=\"iniciando-o-projeto-em-nextjs\"><a href=\"#iniciando-o-projeto-em-nextjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Iniciando o projeto em Next.js</h2>\n<p>De cara já fiquei super feliz com o boilerplate do Next.js. Segui a\n<a href=\"https://nextjs.org/docs#setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentação</a> e instalei usando <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">npx create-next-app</code>.\nEle já me deu esqueleto inicial com alguns páginas e até uma mini Rest API. Pro\nmeu projeto atual não vou precisar mas fiquei surpresa quando vi, pode ser bem\nútil em outros projetos.</p>\n<p>Eu gosto muito que o Next.js cuida das rotas baseado na estrutura das pastas sem\na gente precisar configurar nada.</p>\n<h2 id=\"importando-uma-biblioteca-externa-que-é-rendereziada-no-cliente\"><a href=\"#importando-uma-biblioteca-externa-que-%C3%A9-rendereziada-no-cliente\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Importando uma biblioteca externa que é rendereziada no cliente</h2>\n<p>De cara meu primeiro desafio foi lidar com o erro <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ReferenceError: window is not defined</code>.\nEle apareceu quando tentei adicionar ao projeto uma\n<a href=\"http://wavesurfer-js.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">biblioteca externa</a> e inseri como sempre fiz em\nqualquer outro projeto React - instalei com npm/yarn, e dei o import <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">import WaveSurfer from &quot;wavesurfer.js&quot;;</code> e oops:</p>\n<p><img src=\"/images/posts/window-not-defined.png\" alt=\"Window not defined\"></p>\n<p>A principio achei bem esquisito, já que o objeto <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">window</code></a> é basicamente a porta de entrada pro DOM da janela atual\nonde o script está sendo rodado. Como assim ele não foi definido? Imaginei que\npoderia ser algo relacionado ao documento ainda não ter sido renderizado então\nadicionei o componente dentro do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">useEffect</code>, mas continuei com o mesmo problema.\nDepois de ler um pouco sobre que me toquei que esse código provavelmente está\nsendo rodado do lado do servidor! E nesse caso não existe mesmo uma <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">window</code>.</p>\n<p>Aí veio a segunda surpresa boa: a documentação do Next.js é ótima e já tinha uma\n<a href=\"https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">seção só pra isso</a>.\nEu passei por vários artigos e respostas no stackoverflow que\nsó induziam a um ctrl+c ctrl+v sem explicar direito. No fim bastava ler a\ndocumentação para chegar na solução: o que queremos é que esse componente seja\nrenderizado apenas do lado do cliente. Pra isso basta fazer um import dinâmico\ncom a opção <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ssr: false</code>, ou seja, sem renderizar no servidor.</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">const AudioPlayer = dynamic(() =&gt; import(&quot;../components/AudioPlayer&quot;), {\n  ssr: false,\n});</code>\n<p>E o componente AudioPlayer escrevo normal como em qualquer outro projeto React.</p>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>O bom de ter lidado com esse erro logo de cara foi que me fez mudar a forma de\npensar no início do projeto e lembrar que a principal diferença do Next.js e\noutros projetos React é justamente entender que o projeto é renderizado no\nservidor ao invés do cliente, mas ao mesmo tempo ele permite esse dinamismo\nquando precisamos que algo seja renderizado no cliente, dando o melhor dos dois mundos!</p>\n","excerpt":"","description":"","path":"/primeiros-passos-com-nextjs/","cover":"","tags":[{"id":"pt-br","title":"pt-br","path":"/tag/pt-br/"},{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"nextjs","title":"nextjs","path":"/tag/nextjs/"},{"id":"react","title":"react","path":"/tag/react/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"4761b34ad1a7c2ceb12101e3d2a606eb","title":"Minha saga com pytest e SQLAlchemy em uma aplicação FastAPI","datetime":"2020-07-25 10:00:00","content":"<p><strong>TLDR:</strong> meu causo sobre aprender <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> na marra. Os primeiros parágrafos são\nintrodutórios, se quiser pular pra parte técnica pode ir direto pro <strong>Perrengue 1</strong>.</p>\n<p>Desde que voltei a trabalhar full-time como desenvolvedora (há uns 3 anos), tive\nque reaprender muita coisa e não posso mais me dar ao luxo de continuar com\nalguns gaps teóricos importantes de computação, já que hoje ocupo uma\nposição de tech lead e por estar em um time pequeno, preciso pensar em\narquiteturas de ponta a ponta em stacks diferentes e pra mim o mais difícil:\ndo zero. Decidi então seguir a onda de aprender em público e começa a escrever\nsobre meus aprendizados, quem sabe não ajuda mais alguém que passe pelo mesmo caminho.</p>\n<p>Em quase todos os meus trabalhos passados eu sempre entrei em projetos existentes\no que torna muito mais fácil desenvolver novas features, já que temos no próprio\nrepositório exemplos de como fazer algo. Mas e quando precisamos escolher\ntodas as ferramentas e configurar tudo do início? As vezes pode ser um trabalho\nbem sofrido e moroso. É por isso que ferramentas como <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Create\nReact App</a>, <a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django</a>, e <a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FastAPI</a> (minha favorita da vez) fazem tanto sucesso.</p>\n<p>Estou trabalhando em uma API RESTFul criada com o FastAPI. Conseguimos portar uma\nAPI feita em Flask pra FastAPI em apenas ~2 semanas em duas pessoas (!), nada contra Flask, mas por ser tão minimalista, ter que configurar coisas como documentação com especificação OpenAPI, um bom suporte pra gestão do banco de dados e concorrencia estava tomando tempo e exigindo um bom tempo de estudo pra fazer uma trabalho bem feito. E foi nisso que o FastAPI nos conquistou! Ele entrega tudo isso de fábrica.</p>\n<p><strong>Disclaimer</strong>: acho super importante gastar tempo aprendendo pra fazer algo bem\npensado, mas a gente sabe que no dia a dia do trabalho a realidade é outra, né? na maior parte das vezes, independente da cultura da sua empresa, o tempo de estudo é limitado e precisamos entregar o que foi pedido num certo período de tempo.</p>\n<p>Comecei então a configurar os testes. Quando o projeto foi feito em Flask tinha\npouquissima cobertura e a configuração do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> não estava muito legal então\nresolvi jogar essa parte fora e começar o setup dos testes do zero.</p>\n<p>Eu adoro criar testes mas até então só tinha mexido na parte de escrever os casos\nde teste mesmo então sempre começava já com ctrl+c, ctrl+v de um teste existente e adaptava pro caso que queria. Também não tinha experiência com <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> ainda.</p>\n<p>Vendo a documentação do FastAPI, rodar testes com <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> no projeto é bem trivial, usei o exemplo padrão e funcionou de primeira, achei que tivesse pronta pra escrever os casos. O projeto usa SQLAlchemy com mysql pra produção e pros testes optei\npor sqlite.</p>\n<p>Mas aí é quando as dificuldades começam, quando precisamos adaptar pro nosso cenário.\nMinhas necessidades eram:</p>\n<ul>\n<li>Iniciar os testes com a banco populado com alguns registros</li>\n<li>O banco precisa ser limpo e populado com os valores iniciais a cada teste, pra\nque nenhum teste interfira no outro</li>\n</ul>\n<p>Achei que seria simples e acharia muitos exemplos por aí, mas conseguir o que\nqueria me custou muitas horas a mais do que eu esperava.</p>\n<h2 id=\"perrengue-1-entendendo-como-isolar-os-ambientes\"><a href=\"#perrengue-1-entendendo-como-isolar-os-ambientes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Perrengue 1 (entendendo como isolar os ambientes)</h2>\n<blockquote>\n<p>Ao rodar os testes em um ambiente limpo (no gitlab CI), dava erro por não\nconseguir se conectar ao banco.</p>\n</blockquote>\n<p>Primeiro, por que que ao rodar os testes ele tenta acessar o banco configurado no\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.env</code> se eu configuro o sqlite espeficamente pros testes? e segundo, porque local funciona e no docker do CI não?</p>\n<p>Pela documentaçao do FastAPI, eles recomendam usar o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">create_all</code> do SQLAlchemy\npara criar todas as tabelas <a href=\"https://fastapi.tiangolo.com/tutorial/sql-databases/#create-the-database-tables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">antes de iniciar a aplicação</a>. O problema é que fazer\nexatamente assim faz com que o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">create_all</code> seja chamado, só pelo fato de importar o app pros testes. Então a solução foi isolar\no <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">create_all</code> de modo que ele fosse chamado apenas ao rodar a aplicação real, e\nnão com os testes. Isso também explica porque local funcionava e no CI não: local\neu tinha as variaveis de ambiente configuradas corretamente então a conexão com\no banco era bem sucedida mesmo que pros testes fosse usado um banco sqlite.</p>\n<h2 id=\"perrengue-2-entendendo-pytestfixture\"><a href=\"#perrengue-2-entendendo-pytestfixture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Perrengue 2 (entendendo pytest.fixture)</h2>\n<blockquote>\n<p>Não consigo conectar ao banco dentro de uma pytest.fixture</p>\n</blockquote>\n<p>Eu sou super defensora de ler a documentação e li e reli a documentação do\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> umas 5 vezes pra entender o que eu tinha feito errado. Mas às\nvezes mesmo lendo a documentação, se a gente não tem ideia do que está\nacontencedo a doc simplesmente não faz sentido, pelo menos acontece muito comigo,\neu leio as palavras mas nada acontece na minha cabeça, não absorvo o sentido.\nEntão o que percebi que funciona pra mim é um mix de brute force com documentação:\nlê a doc, experimenta um parâmetro ou propriedade diferente, testa e vê o que acontece, repete até entender.</p>\n<p>Baseada na doc do FastAPI, eu tentei usar a mesma função pra conectar ao banco que a aplicação usava, que é algo assim:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">get_db</span><span style=\"color: #24292EFF\">():</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">try</span><span style=\"color: #24292EFF\">:</span>\n<span style=\"color: #24292EFF\">        db </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">TestingSessionLocal()</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># sessão criada com sessionmaker do SQLAlchemy</span>\n<span style=\"color: #24292EFF\">        </span><span style=\"color: #D32F2F\">yield</span><span style=\"color: #24292EFF\"> db</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">finally</span><span style=\"color: #24292EFF\">:</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">close()</span></code></pre>\n<p>Eu tentei fazer com que isso fosse uma fixture com o parametro <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">autouse=True</code>\npra que fosse chamada dentro de cada teste e assim eu poder usar o banco como <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db</code>\npra importar os dados que eu queria e inserir o registros iniciais. Mas ao usar\nassim recebia o erro: </p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">yield_fixture function has more than one &#039;yield&#039;</code>\n<p>Hmm.. os links que o erro sugere na doc explicam bem sobre o erro acima, mas o que será uma <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">yield_fixture</code>? e foi essa dúvida que fez as mil vezes que li\na documentação fazer algum sentido! Basicamente entendi que a <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> funciona como\num \"envelope\" ao redor do teste, seguindo o seguinte padrão:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6F42C1\">@pytest.fixture</span>\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> minha_fixture:</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># insira qualquer lógica pra ser executada ANTES do teste</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">yield</span><span style=\"color: #24292EFF\">  </span><span style=\"color: #6A737D\"># (!!) é esse yield que vai retornar o teste e faze-lo rodar</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># insira a lógica de tear down, pra ser executada DEPOIS do test</span>\n\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">test_case_xis</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #FF9800\">minha_fixture</span><span style=\"color: #24292EFF\">):</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">assert</span><span style=\"color: #24292EFF\"> a </span><span style=\"color: #D32F2F\">==</span><span style=\"color: #24292EFF\"> b</span></code></pre>\n<p>Então a <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> realmente era o que eu precisava.</p>\n<p>Quando eu chamava o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">yield db</code> lá em cima no <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">get_db</code>, o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> tentava\nrodar o teste e nunca chegaria no segundo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">yield</code> que roda o teste de fato,\nentão o que eu gostaria que acontecesse no setup não tava acontecendo.</p>\n<p>A solução foi bem simples, eu não precisava de uma função pra acessar o banco, bastava rodar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db = TestingSessionLocal()</code> onde esse <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">TestingSessionLocal</code> é uma sessão criada pelo SQLAlchemy e no tear down do teste, dar um <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db.close()</code>. Isso resolveu meu caso\nde acessar o banco, limpa-lo e inserir os dados falsos antes de cada teste.\nFicou algo assim:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6F42C1\">@pytest.fixture</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #6F42C1\">autouse</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #1976D2\">True</span><span style=\"color: #24292EFF\">)</span>\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">init_db</span><span style=\"color: #24292EFF\">():</span>\n<span style=\"color: #24292EFF\">    db </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">TestingSessionLocal()</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># Clean up tables before importing the initial data</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">query(MyModel)</span><span style=\"color: #24292EFF\">.</span><span style=\"color: #6F42C1\">delete()</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">commit()</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># Insert mock data in the db</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">for</span><span style=\"color: #24292EFF\"> r </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> fake_records:</span>\n<span style=\"color: #24292EFF\">        new_record </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">MyModel(</span><span style=\"color: #D32F2F\">**</span><span style=\"color: #6F42C1\">r)</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">add(new_record)</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">commit()</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">refresh(new_record)</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">yield</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># run the test</span>\n\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">close()</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># close session after running the test</span></code></pre>\n<h2 id=\"perrengue-3-entendendo-como-funcionam-os-models-do-sqlalchemy\"><a href=\"#perrengue-3-entendendo-como-funcionam-os-models-do-sqlalchemy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Perrengue 3 (entendendo como funcionam os models do SQLAlchemy)</h2>\n<blockquote>\n<p>Consegui popular o banco antes de um teste, fui replicar o mesmo teste e no\nsegundo caso os valores do primeiro teste ainda estavam no banco</p>\n</blockquote>\n<p>Depois de finalmente entender como <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> funciona, comecei a ter problemas ao inserir mais casos de teste. Usando nosso amigo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">print</code> a impressão que dava era que a fixture só era acessada no primeiro caso. Isso me levou a pesquisar sobre\ncache de fixture, como que as fixtures era chamadas, etc, sem sucesso.</p>\n<p>Usando <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdb</code> eu consegui confirmar que a fixture estava sendo chamada a cada teste, então por que raios o banco não estava sendo limpo?</p>\n<p>Foi aí que comecei a desconfiar que o problema não era mais a fixture e precisei entender melhor como o SQLAlchemy lida com sessões\ne gerencia o banco em tempo de execução. Recomendo <a href=\"https://www.michaelcho.me/article/sqlalchemy-commit-flush-expire-refresh-merge-whats-the-difference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">esse artigo</a> sobre isso.</p>\n<p>Pra inserir os dados fakes, eu criei um array com meus models já usando o model\nda aplicação, algo como:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">users </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6F42C1\">MyModel(id</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #1976D2\">1</span><span style=\"color: #6F42C1\">, name</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #22863A\">\"ABC\"</span><span style=\"color: #6F42C1\">)</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6F42C1\">MyModel(id</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #1976D2\">2</span><span style=\"color: #6F42C1\">, name</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #22863A\">\"XYZ\"</span><span style=\"color: #6F42C1\">)</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">]</span></code></pre>\n<p>E na minha fixture:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">for</span><span style=\"color: #24292EFF\"> user </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> users:</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">add(user)</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">commit()</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">refresh(user)</span></code></pre>\n<p>O primeiro teste a ser rodado SEMPRE dava certo, mas do segundo em diante não.\nEu não conseguia entender o que estava fazendo de errado até tentar entender como\no meu model estava sendo criado: o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">MyModel</code> é uma classe que herda o Base da aplicação que no fundo é um <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">declarative_base</code> do SQLAlchemy. Ah-há! eu\nachava que eu estava só declarando um array de objetos do tipo MyModel, mas na\nverdade ao criar esse array o SQLAlchemy já estava instanciando esses objetos\ncomo parte dos dados da sessão aberta mesmo que eles não tivessem sido inseridos no banco!</p>\n<p>Então ao rodar esse <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">for</code> mais de uma vez o SQLAlchemy reclamava porque o objeto já tinha sido inserido em algum momento então ele não inseria de novo, por isso eu lidava com erros como:\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Object already attached to session</code> ou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sqlalchemy.exc.InvalidRequestError: Could not refresh instance</code>. Tudo porque eu estava tentando inserir um objeto que ja tinha sido\ninserido no banco E já tinha sido deletado, porque eu deleto tudo antes de rodar os testes, lembra?</p>\n<p>Depois de entender tudo isso fez sentido, eu não preciso ter um array de models reais\npra meus dados falsos antes de criá-los, eu posso ter um array de dicts e na hora de inserir no banco que crio o objeto de verdade, então por fim a solução foi:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">users </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span>\n<span style=\"color: #24292EFF\">    {</span><span style=\"color: #22863A\">\"id\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"name\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #22863A\">\"ABC\"</span><span style=\"color: #24292EFF\">},</span>\n<span style=\"color: #24292EFF\">    {</span><span style=\"color: #22863A\">\"id\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"name\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #22863A\">\"XYZ\"</span><span style=\"color: #24292EFF\">},</span>\n<span style=\"color: #24292EFF\">]</span></code></pre>\n<p>E na minha fixture:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">for</span><span style=\"color: #24292EFF\"> user </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> users:</span>\n<span style=\"color: #24292EFF\">    new_user </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">MyModel(</span><span style=\"color: #D32F2F\">**</span><span style=\"color: #6F42C1\">user)</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">add(new_user)</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">commit()</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">refresh(new_user)</span></code></pre>\n<p>Pronto, agora sim posso ter mil testes todos isolados com o banco limpo e dados\ninciais antes de rodar :)</p>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>Ficar na superfície pode cobrir a maior parte dos casos, mas assim que precisamos de algo que foge do básico ou da configuração que \"vem pronta\" (mesmo que não seja nada extraordinário, como foi meu caso), não tem stackoverflow que salve e precisamos entender de fato o que está acontecendo por baixo dos panos. Pra mim o combo ler documentação + um bom tempo com debug e experimentação é a melhor forma de aprender.</p>\n<p>Agora posso finalemente focar em escrever os testes de fato e garantir que minha aplicação funciona como esperado.</p>\n<hr>\n<p>Se eu falei alguma bobeira ou você sabe uma forma melhor de solucionar os casos\nque mencionei no post, deixa seu comentário aí embaixo ;)</p>\n","excerpt":"","description":"","path":"/minha-saga-com-pytest-e-sqlalchemy/","cover":"","tags":[{"id":"pt-br","title":"pt-br","path":"/tag/pt-br/"},{"id":"python","title":"python","path":"/tag/python/"},{"id":"pytest","title":"pytest","path":"/tag/pytest/"},{"id":"sqlalchemy","title":"sqlalchemy","path":"/tag/sqlalchemy/"},{"id":"carreira","title":"carreira","path":"/tag/carreira/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"f3620e182ebab7c23255a3e1e7170bb6","title":"26 dicas para facilitar sua vida com Git e Github","datetime":"2019-01-16 14:30:43","content":"<p>Entrei na brincadeira do Twitter compilar dica sobre algum assunto em troca de like ou RT e resolvi falar sobre git e GitHub que é um assunto que sinto que muita gente tem dificuldade e se você trabalha com desenvolvimento de software, não importa a linguagem e especialidade, garanto que git é fundamental pro seu dia-a-dia.</p>\n<blockquote>\n<p>Também quero brincar 🤓</p>\n<p>1 RT = 1 dica de git ou Github</p>\n<p>— Ana Rute‏ 🌈 (@ana_rute) <a href=\"https://twitter.com/ana_rute/status/1083352112371765248?ref_src=twsrc%5Etfw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">January 10, 2019</a></p>\n</blockquote>\n<p>Segue então um compilado de 26 dicas sobre Git e GitHub:</p>\n<ol>\n<li>Acabou de dar commit, não deu push ainda mas quer adicionar mais algum arquivo?<br>\n1 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add</code><br>\n2 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code><br>\nO amend modifica o commit passado, então você pode inclusive usá-lo pra remover arquivos do commit, mudar a mensagem, trocar autor, o que quiser!</li>\n<li>Criei um monte de commit que não quero mais, mas não quero perder as mudanças que fiz:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --soft</code><br>\nAs suas mudanças vão estar staged, prontas pra serem commitadas novamente</li>\n<li>Quero apagar tudo (commits e mudanças) que fiz e deixar minha branch exatamente igual a um commit específico ou branch:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard</code><br>\nSe quiser deixar igual a uma branch remota, pode ser <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard origin/branch</code></li>\n<li>Não faço ideia de como deixei meu repo local nesse estado:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reflog</code><br>\nVai te dar um histórico do que você fez</li>\n<li>Mexi um monte num arquivo, mas quero commitar só uma parte das mudanças:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -p</code><br>\nVai te mostrar pedaço por pedaço do que você mudou e te perguntar o que quer colocar em stage</li>\n<li>\n<p>Ao começar um projeto novo, não se esqueça de já configurar o arquivo .gitignore pra evitar subir arquivos indesejados. Vai ser bem mais fácil se já fizer do começo do que ter que remover depois 🤙<br>\nAqui tem um monte de template que dá pra copiar:</p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/gitignore</a> - A collection of useful .gitignore templates. Contribute to github/gitignore development by creating an account on GitHub.</p>\n</blockquote>\n</li>\n<li>Quero ver o diff inteiro de código do que foi feito nos últimos commits<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log -p</code></li>\n<li>Quero acompanhar o fork de um projeto:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote add &lt;https://url-do-fork.git&gt;</code><br>\nPra ver todos os remotes do repo q vc tem localmente:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote -v</code><br>\nPra usar, é só trocar origin pelo nome que você deu ao remote:<br>\ngit pull , git checkout nome-fork/branch...</li>\n<li>No GitHub, se você escrever na mensagem do commit \"close\", \"closes\", \"closed\", \"fixes\" ou \"fixed\" seguido de hashtag + número da issue (por exemplo: \"Fixes #1234\") , a issue é automaticamente fechada</li>\n<li>Para quem usa o VS Code, super recomendo o plugin Git Lens. Ele mostra visualmente todo o histórico de commits do arquivo, quem fez o quê e quando, bem útil:<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitLens — Git supercharged - Visual Studio Marketplace</a></li>\n<li>Criou uma branch com o nome errado e só percebeu bem depois, na hora de dar push? no worries:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git branch -m nome-velho nome-novo</code></li>\n<li>Sabia que no GitHub dá pra usar emoji nas mensagens de commit? Pra usar precisa seguir o modelo \":nome-do-emoji:\"<br>\nPra ser sincera eu não sou muito fã, mas num projeto mais zuerinha, quem sabe :smile:<br>\n<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aqui tem uma colinha</a>.<br>\nQuem quiser ir além no assunto emoji no commit, dá uma olhada <a href=\"https://medium.com/walmartlabs/semantic-commit-messages-with-emojis-dba2541cea9a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nesse artigo</a>.</li>\n<li>Vc sabe a diferença entre git e GitHub? git é o software de controle de versão, GitHub é uma plataforma para hospedar projetos que usam git. Fora o GitHub existem outras soluções como BitBucket e GitLab, e por ser open source vc pode ter o seu próprio servidor de git</li>\n<li>Se você tem dificuldade com vim ou outro editor de linha de comando, é possível trocar o editor padrão que o git usa pra escrever as mensagens de commit ou resolver conflitos:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git config --global core.editor &quot;seu-editor&quot;</code></li>\n<li>Eu entendo ter preguiça de adicionar arquivo por arquivo, mas ao invés de dar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code> e vez ou outra subir o que não deve, usa <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -u</code> que ele vai adicionar só os arquivos que já foram trackeados pelo git. Ou melhor, nunca use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code></li>\n<li>Escreva mensagens de commit concisas e específicas. Quanto mais detalhada for a descrição do commit (to de olho em você só usar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit -m</code>), melhor pro seu eu do futuro, principalmente se seu código não for muito comentado.</li>\n<li>Eu sou da turma dos micro commits: quanto mais commits melhor. A função funcionou? commita. O teste passou? commita. Isso ajuda muito no futuro caso tenha que desfazer algo, caçar bugs ou reaproveitar código. Mesmo q não esteja 100%, commita com \"WIP\" na frente q é a dica 18</li>\n<li>Se você não acabou o que tinha que fazer mas não quer correr o risco de perder o que já foi feito, vc pode commitar e na mensagem adicionar \"WIP\" antes, que significa Work in Progress. Quando tiver pronto vc poder dar commit --amend e tirar o WIP da mensagem ;)</li>\n<li>Mais sobre WIP: essa dica é só pra quando você estiver numa branch separada. Se tiver trabalhando com alguém na mesma branch, é bom avisar pra não mandar código quebrado pra coleguinha. E evite mandar WIP pra master, já que devemos sempre evitar modificar o passado dessa branch</li>\n<li>Se tiver q modificar um commit do passado que ñ seja o último, por exemplo pra tirar um commit WIP, a gente usa o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>, que é o rebase interativo. Esse já é um pouco mais difícil, eu fiz um post que explica uma das formas de usar: anarute.com/preciso-modifi…</li>\n<li>Use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash</code> pra guardar <em>temporariamente</em> os arquivos modificados q ainda ñ foram commitados. Útil qndo precisa trocar de branch, por ex., testar o código sem suas mudanças, ou testar em outra branch. Pra \"pegar\" as mudanças de volta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash pop</code></li>\n<li>Quero pegar só um commitzinho de uma branch que ainda não tá em master e jogar na branch que você está:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git cherry-pick</code></li>\n<li>Eu to dando várias dicas e uma galera já tá contribuindo falando outras formas de fazer algo que eu disse. Uma das coisas mais legais de git é que tem vários caminhos de chegar num mesmo resultado, você tem q ver o que é melhor/mais produtivo pro seu fluxo de trabalho</li>\n<li>Eu vejo muita gente que tá começando tendo que digitar nome e usuário TODA vez que clona, dá push ou pull. Isso é porque vc ainda não adicionou uma chave SSH do seu computador no GitHub! Arrumar isso é facinho: help.github.com/articles/addin…</li>\n<li>Todas as dicas dessa thread são pra usar git na linha de comando. Por isso é mega importante perder o medo do terminal! Ele não morde, aos pouquinhos a gente se familiariza a ponto de preferir fazer tudo por lá</li>\n<li>Sobre git e terminal: se vc ainda ñ modificou seus dotfiles ou não usa algum tema bonitinho q mostra qual branch vc tá, status do staging, etc. Recomendo q faça já! Aumenta a produtividade exponencialmente.<br>\nEu uso zsh + oh my zsh + qlqr tema que trate git<br>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link para Oh my Zsh</a></li>\n</ol>\n","excerpt":"","description":"","path":"/26-dicas-para-facilitar-sua-vida-com-git-e-github-parte-1/","cover":"","tags":[{"id":"git","title":"git","path":"/tag/git/"},{"id":"github","title":"github","path":"/tag/github/"},{"id":"dicas","title":"dicas","path":"/tag/dicas/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"08d6fa1ed3b0b9a9b4632ed5fde766ec","title":"Como restaurar backups em um banco PostgreSQL","datetime":"2017-02-24 14:30:43","content":"<p>De tempos em tempos eu preciso restaurar um backup de algum banco para outro ou\npreencher o banco de um novo ambiente de desenvolvimento local com dados\npara testes. Como não é uma tarefa diária, nem sempre me lembro como faz, então\nresolvi juntar aqui o passo a passo até pra facilitar nas próximas vezes e talvez\npossa também ajudar alguém.</p>\n<p>Antes de poder restaurar algum backup, precisamos crear o dump! O comando utilizado\npara isso é o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pg_dump</code> que já nos devolve um <em>dump</em> da tabela inteira - se\nquiser saber mais <a href=\"https://www.postgresql.org/docs/current/static/app-pgdump.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">clique aqui</a>\npara ler a documentação.</p>\n<pre>pg_dump dbname > backupfile.sql</pre>\n<p>No comando acima, extraímos todos os dados do banco (troque <em>dbname</em> pelo nome\nda sua tabela) e jogamos em um arquivo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.sql</code>. Pronto, já temos o backup salvo.\n<strong>Dica:</strong> esse é um jeito bem fácil de manter backup de seus bancos. Recomendo\ncriar um comando que faça esse backup e utilizar o\n<a href=\"https://help.ubuntu.com/community/CronHowto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cron</a> para fazer isso\nautomaticamente sempre.</p>\n<p>Para restaurar o backup num banco, o postegres também nos permite fazer isso de\num jeito bem simples, mas tem alguns detalhes:</p>\n<ol>\n<li>o banco precisa existir com o mesmo nome do banco que foi extraído.</li>\n<li>o banco não pode ter as tabelas criadas, senão vai dar conflito e a\nrestauração não vai dar certo.</li>\n</ol>\n<p>Nesse caso, se o banco já existir primeiro eu dou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">dropdb db_name</code> que vai\ndeletar o banco (<strong>IMPORTANTE</strong>, eu só faço isso em bancos locais, porque isso\napaga <strong>todos os dados</strong> do banco, então <strong>NUNCA</strong> faça isso em produção a menos\nque você saiba exatamente o que está fazendo. Dá justa causa, hein? Deus tá\nvendo). Depois de deletar, precisamos recriá-la senão a restauração não vai\nfuncionar por não encontrar o banco. Para recriá-lo: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">createdb db_name</code></p>\n<p>Por fim, para restaurar os dados, jogamos o arquivo no novo banco:</p>\n<pre>psql dbname < infile</pre>\n<p>Pronto, temos um banco restaurado! Para mim esse processo é fundamental em dois\nmomentos: quando por algum motivo - normalmente tenso - eu preciso restaurar o\nbanco em produção ou quando vou começar um novo ambiente de desenvolvimento e\npreciso de dados para testar o app e as mudanças que estou fazendo.</p>\n","excerpt":"","description":"Guia básico para criar e restaurar um dump de um banco em PostgreSQL","path":"/como-restaurar-backups-em-um-banco-postgresql/","cover":"https://images.unsplash.com/photo-1495669735947-8ebe33b049bf?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1920&h=1080&q=80","tags":[{"id":"sysadmin","title":"sysadmin","path":"/tag/sysadmin/"},{"id":"postgresql","title":"postgresql","path":"/tag/postgresql/"},{"id":"databases","title":"databases","path":"/tag/databases/"},{"id":"db","title":"db","path":"/tag/db/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"82338461f4fe3f4c963d8ca004c2949c","title":"Farewell Mozilla - or how it went fast!","datetime":"2016-08-23 14:30:43","content":"<p>Wow, how fast can 3 months go? 3 months ago I was extremely happy and anxious about how I was going to manage to become a web dev intern at a <a href=\"http://anarute.com/getting-started-with-taskcluster/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">project I knew nothing about</a> and to really work as a developer in a company that I admire since I'm an internet user.</p>\n<p>Suddenly, here I am preparing the slides for my end-of-internship presentation on next Friday, 26th. It has been a lot of challenges, stress, learning and above all a huge personal growth! Some highlights of what I've learnt:</p>\n<p>✓ What is Taskcluster and how the AWS provisioner works (ok, there's still a lot to learn here).</p>\n<p>✓ What is an Azure entity and how to <a href=\"http://anarute.com/the-amiset-entity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create one</a>.</p>\n<p>✓ How to run an application with no GUI interface and how to test things with <a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocha</a> - and accept that some things we just <em>can't</em> see, but they work!</p>\n<p>✓ How to build a <a href=\"http://anarute.com/how-to-manage-ami-sets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React app</a> - I didn't build it from scratch but I definitely learnt a lot here.</p>\n<p>✓ Ask for help soon instead of wasting hours and hours stuck on a small issue (such as a typo).</p>\n<p>✓ Receiving a lot of comments and critics in your PR can actually be a good thing and an opportunity to learn.</p>\n<p>✓ Not be afraid of making mistakes and make <em>stupid</em> questions - there's no such thing as a stupid question.</p>\n<p>✓ How to work in a completely remote team and actually be very productive.</p>\n<p>✓ Got so many great tips from powerful women with the Women in Tech series sessions (thanks to everyone involved to make this happen).</p>\n<p>Beyond all the technical and professional things, I also had a lot of fun! I had the opportunity to go to London and have the experience of what if feels like to be a Mozillian. I met so many awesome people on this path that I can only say thank you!</p>\n<p>Mostly thanks to Dustin, an awesome person who I had the privilege of having as my mentor during this period. Thank you, Dustin, for teaching me so much in so little time! For being a great career advisor, for pushing me when I wasn't confident about myself and for being a friend. Selena, you became a role model for me! I'm lucky I had the chance to meet you and to have you as our team leader. Kristel, it was awesome to meet you and share my challenges and frustrations with you, you are a very strong person, I hope you the best, always. Wander, always ready to help me when I didn't wake up in a good relationship with English words, I'm glad to call you a friend now, for sure we are going to meet a lot here in Brazil. Thanks, John and Eli for the code reviews - I learnt a lot with them. Andrea and Hassan, it was nice to meet you in London, we had a great time! Greg, I wish you the best on your new role on the team, you are already doing a great job! Pete, Jonas and Brian, unfortunately, we didn't have the chance to work much together but I could see how much effort and dedication you all put on Taskcluster, it's really inspiring!</p>\n<p>Thank you, Taskcluster team, it was a pleasure to work with you all. Such a passionate and highly skilled team. I learnt a lot with all of you!</p>\n<p><img src=\"/images/posts/plops-1.jpg\" alt=\"Platform Operations team at London All Hands\"></p>\n<p>PS.: If you are reading this and intend to apply to Outreachy, please do it, you won't regret it! Feel free to ask for help or tips at anarutecvm at gmail dot com.</p>\n","excerpt":"","description":"","path":"/farewell-mozilla-and-outreachy-or-how-it-went-fast/","cover":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy/"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS/"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster/"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"b653b66d9ceafa2418e00990ffd4c7bb","title":"How to manage AMI sets","datetime":"2016-07-22 14:30:43","content":"<p>After finishing the first version of the <a href=\"http://anarute.com/the-amiset-entity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AMI sets entity</a>, now we need to be able to manage them.</p>\n<p>Taskcluster has already a set of tools to manage its components and elements: the <a href=\"https://tools.taskcluster.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">taskcluster tools</a>. In order to manage the AMI sets it was natural to build a tool for that. At first, our main goal is to build a minimal tool that allows us to list all the AMI sets known to the AWS provisioner and to add, edit and delete AMI sets.</p>\n<p>The final shape of an AMI set is this:</p>\n<pre>\"amis\": \n  [\n    {\n      \"region\": \"us-west-1\",\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n    }\n  ]\n</pre>\n<p>The ideal way to manage this is to allow the user to edit each field separately and check if the AMIs are valid automatically, but for now we are editing it as a JSON object since the back end already checks if the data is valid.</p>\n<p>The taskcluster tools are built with <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> and before this project I have never built anything with it. So to start, there's no better way than compare how all the other tools are built. I knew that I needed to figure out how to list the amiSets and how to embed a code editor to be used to edit and create amiSets, so my main examples were the <a href=\"https://tools.taskcluster.net/auth/roles/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Roles tool</a> and the text editor from <a href=\"https://tools.taskcluster.net/task-creator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Task Creator tool</a>. The editor used in taskcluster tools is <a href=\"http://codemirror.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeMirror,</a> a text editor built in javascript for the browser.</p>\n<p>My first step was to build the add amiSet function - after all, without amiSets I cannot test any other endpoint. I started to see progress when apparently no errors showed up when trying to add an amiSet, but to check if it really worked I needed the listing function, then the view function. After making this work, edit and delete were the final ones. A <a href=\"https://github.com/taskcluster/taskcluster-tools/pull/121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">first version</a> is already being reviewed and hopefully it will be published soon. We still have a lot of improvements to make but it seems good enough to move forward and start to incorporate the amiSets in the AWS provisioner architecture.</p>\n<p>Even after testing the AMI sets entity endpoints in the back end, I wasn't sure if it was really working because I could only see that it passed the tests that I have built, but I couldn't really see the amiSets (<em>and I must say I'm a very visual person</em>) but now with the tool I finally can see them, and it is grateful to see that what you're doing is working! - until it breaks something, of course.</p>\n","excerpt":"","description":"","path":"/how-to-manage-ami-sets/","cover":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy/"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS/"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster/"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"437cfbeb0ed8dc8f278f64eb59e0357d","title":"The AmiSet Entity","datetime":"2016-06-10 14:30:43","content":"<p>Taskcluster is a complex and big project and I'm working on a specific part of it: where we manage the Amazon instances and Machine Images (AMIs). As I've mentioned in my <a href=\"http://anarute.com/getting-started-with-taskcluster/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">last post</a>, my job here starts by creating a new database entity called AMI set, which stores sets of AMIs keyed by region and virtualization type.</p>\n<p>My work during the last two weeks were to understand how the AWS provisioner project is organized and how to create a new entity. Since I was creating something I knew nothing about, start coding seems to be the hardest part because I have no references of things I've done before and I need to learn basically everything. A good advice for newbies would be to chop everything into the smallest parts we can (I think this fits for almost every job and area).</p>\n<p>I took the Worker Type entity as my starting point as suggested by <a href=\"http://code.v.igoro.us/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dustin</a> - my mentor - and wrote the AMI Set entity definition by checking what I could replicate from WorkerType and discarding what didn't make sense. Which ended up with this basic definition:</p>\n<pre>let AmiSet = base.Entity.configure({\n\nproperties: {\n    id: base.Entity.types.String,\n    amis: base.Entity.types.JSON,\n    // Store the date of last modification for this entity\n    lastModified: base.Entity.types.Date,\n  },\n});\n</pre>\n<p>This is a very simple entity and its core part is the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">amis</code> property, which needs to store the AMIs by region and virtualization type. The thing is, since it is a \"generic\" JSON object we need to decide how the object will be. We have mainly two options:</p>\n<pre>{\n   \"us-west-1\": {\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n  },\n   \"us-east-1\": {\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n  }\n}\n</pre>\n<p>Or</p>\n<pre>[\n   {\n      \"region\": \"us-west-1\",\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n   },\n   {\n      \"region\": \"us-east-1\",\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n   }\n]\n</pre>\n<p>As <a href=\"https://github.com/taskcluster/aws-provisioner/pull/85#discussion-diff-66091884\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@jhford pointed and @djmitche agrees</a>:</p>\n<blockquote>\n<p>Whether we have a list of objects or a straight mapping is something that you'll have to pick. A list of objects is really nice because you can do really neat things with <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Array.prototype.map</code> and <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Array.prototype.filter</code>. A mapping is really nice because it's easier to address the values and it is impossible to have duplicates. Error checking with the object will be easier, but the list of objects is more in line with what we do elsewhere in the provisioner and probably what I'd prefer to see.</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here</a> we can see more methods that we can do with <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Array.prototype</code>. As explained above, probably we'll go with the list of objects option.</p>\n<p>After creating the entity I started adding its create and delete endpoints. The hardest part this time was to understand the functions and specially if I was dealing with instances, classes or properties.</p>\n<p>The thing that made me learn the most were <a href=\"https://github.com/taskcluster/aws-provisioner/pull/85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the comments</a> Dustin and John made in my Pull Request. It is really helpful to know the things you are doing right or wrong and to know where to go from there. So an important advice here is to start sending patches as soon as possible and don't fear making mistakes - they will happen anyway and we can only learn from them.</p>\n","excerpt":"","description":"","path":"/the-amiset-entity/","cover":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy/"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS/"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster/"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"65680ba6ce71a215b99397579f1b63d1","title":"Getting started with TaskCluster","datetime":"2016-05-27 14:30:43","content":"<p>This was my first week working for Mozilla as an <a href=\"https://gnome.org/outreachy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Outreachy</a> intern. The first challenge was to understand Mozilla's culture and how to fit in. We had some meetings about how the program works and to get updates about TaskCluster, the project I'll be working at for the next 3 months. Mozilla has an awesome structure to receive new employees and I felt very welcomed, but that also means a lot of information to process and organize, which includes how to communicate with a fully remote team, setting up accounts, organizing meetings schedule, entering email lists, using Mozilla tools, joining IRC channels, etc.</p>\n<p>After organizing all these new information, it is time to dive into TaskCluster! From <a href=\"https://docs.taskcluster.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Taskcluster documentation</a> we can read:</p>\n<blockquote>\n<p><em>TaskCluster</em> is the task execution framework that supports Mozilla's continuous integration and release processes.</p>\n</blockquote>\n<p>For me it took a while to understand what TaskCluster is and what it is used for, but the process of understanding it is giving me a lot of \"ah-ha\" moments, which is a great feeling that shows me that I'm already learning a lot. For those who want to learn more, <a href=\"https://docs.taskcluster.net/tutorial/what-is-tc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this page</a> says a bit more about TaskCluster.</p>\n<p><strong>My job at TaskCluster:</strong> add robust AMI management to the TaskCluster AWS Provisioner. More details on bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1265390\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">#1265390</a>.</p>\n<p><strong>My first task:</strong> create AmiSet entity.</p>\n<p>Before I'm able to code anything, I have a bunch of things to do and to understand - the first one is to control the anxiety of wanting to start to code right away...</p>\n<p>I started by understanding the scope and all the parts involved. So a small glossary was very helpful for me:</p>\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AMI</a>: \"An Amazon Machine Image (AMI) provides the information required to launch an instance, which is a virtual server in the cloud.\"</li>\n<li><a href=\"https://aws.amazon.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS</a>: Amazon Web Services. A suite of cloud computing services offered by Amazon. Its <a href=\"https://aws.amazon.com/start-now/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">website</a> brings a bunch of useful tutorials.</li>\n<li><a href=\"https://github.com/taskcluster/aws-provisioner\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AWS provisioner</a>: \"it is responsible for starting Amazon EC2 instances to perform tasks in the TaskCluster queue. It monitors queue lengths and uses spot bidding to maximize the cost-effectiveness of its resources.\"</li>\n<li>Azure Table Storage: Microsoft Azure Table storage service.</li>\n<li><a href=\"https://aws.amazon.com/ec2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">EC2</a>: Amazon Elastic Compute Cloud. \"It's a web service that provides resizable compute capacity in the cloud\".</li>\n<li>Entity: in Azure context, \"Tables store data as collections of entities. Entities are similar to rows. An entity has a primary key and a set of properties. A property is a name, typed-value pair, similar to a column.\" TaskCluster team has built a wrapper that is used in the project: <a href=\"https://github.com/taskcluster/azure-entities\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Azure Table Storage Entities</a>.</li>\n<li>AMI Set: \"An AMI Set is a collection of AMIs with a single name (its AMI Set ID). Each AMI in the set is keyed by its virtualization type (<a href=\"http://cloudacademy.com/blog/aws-ami-hvm-vs-pv-paravirtual-amazon/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PV or HVM</a>) and by its AWS region.\"</li>\n</ul>\n<p>Now that everything is much clearer, let's create AmiSet entity :) - uptades next week!</p>\n","excerpt":"","description":"","path":"/getting-started-with-taskcluster/","cover":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy/"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS/"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster/"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"c72a70a3714733c6bbf9bc1db0a1d6a6","title":"Back to Computing","datetime":"2016-04-26 14:30:43","content":"<p><strong>Muito longo; não li (ml; nl ou tl;dr tupiniquim):</strong> post pessoal sobre meu trajeto na computação e aprovação no programa Outreachy.</p>\n<hr>\n<p>Já sigo um tempo sem postar por aqui nem no <a href=\"http://dicasdefrontend.com.br\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dicas</a> e toda semana fico pensando \"putz, precisava voltar com o blog, preciso mandar email pro dicas\"... mas sento no computador, enrolo, entro em mil <em>vortexes</em> pela internet e quando percebo já está tarde e não tenho mais tempo.</p>\n<p>Soa familiar? Infelizmente esse é um problema muito comum e não existe segredo - pelo menos não descobri ainda, se souber deixa nos comentários, por favor... É muito difícil achar motivação e foco, principalmente quando a gente já trabalha tanto e quer ficar fazendo nada nas horas vagas. Já li muitos conselhos, posts, livros sobre o assunto e sempre chego à conclusão que a solução mesmo é parar de pensar sobre fazer ou não ou quando começar e sentar a bunda na cadeira e começar o que você quer/tem que fazer. A gente costuma gastar muito tempo se dando desculpas do porquê não começar ao invés de gastar esse tempo fazendo o que tem que ser feito.</p>\n<p>Hoje voltei por ter uma novidade muito especial! Pra quem me acompanha desde o início do blog e para os meus amigos próximos, sabem que eu <em>não</em> sou desenvolvedora, embora trabalhe com desenvolvimento de sites desde 2008. Sempre fui mais designer, porém há uns 2~3 anos minha vontade de voltar a estudar computação (fiz curso técnico) tem aumentado. Do ano passado pra cá tive que me virar muito com a plataforma que usamos na <a href=\"http://mupi.me/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mupi</a>, startup da qual sou co-fundadora, e por isso considero que subi alguns níveis na área. De todo modo, continuo com muitas lacunas teóricas e ainda não consigo me definir como desenvolvedora. Ok, tem um pouco de <a href=\"https://medium.com/the-year-of-the-looking-glass/the-imposter-syndrome-9e23e2326d88#.f39b4bfku\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">síndrome de impostora</a> nisso, mas eu chego lá.</p>\n<p>Em março deste ano, decidi aplicar novamente para o programa Outreachy que tem o intuito de inserir mulheres na comunidade de software livre - eu já havia aplicado uma vez em 2013 e não tinha conseguido. Fiquei sabendo que as inscrições estavam abertas faltando 1 semana para encerrar (obrigada <a href=\"http://monicabulgari.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mônica</a> por ter me avisado &#x3C;3) e corri pra me inscrever, já que o processo consiste em preencher a ficha de inscrição e contribuir com um patch pro projeto que eu queria entrar, ou seja, toma um certo tempo. Passada a correria, stress e tempo livre trabalhando nisso, quem entrou num projeto da Mozilla? Yo! <a href=\"https://wiki.gnome.org/Outreachy/2016/MayAugust#Mozilla\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Olha o meu nominho ali.</a></p>\n<p>Ser aprovada no Outreachy tem sido muito importante para eu perceber minha capacidade e comprovar que toda conquista é precedida de muito esforço e dedicação, mas é possível! E essa tem sido minha motivação para desprocrastinar.</p>\n<p>Para as meninas que queiram prestar nas próximas turmas, o processo que segui foi:</p>\n<ul>\n<li>Fuçar no site do <a href=\"https://wiki.gnome.org/Outreachy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Outreachy</a> projetos que fossem do meu interesse (eu me interessei por uns 4, mas é bom focar em 1 porque não há tempo para tentar todos).</li>\n<li>Entrar no canal IRC do projeto escolhido.</li>\n<li>Conversar com os mentores sobre possíveis bugs e patches para enviar e por onde começar.</li>\n<li>Configurar o ambiente de desenvolvimento local para trabalhar nos bugs -> eu tentei trabalhar em dois projetos e <strong>essa é a parte mais difícil e demorada</strong>, pois requer muito tempo para entender como o projeto funciona, instalar todos os requisitos do projeto e fazê-lo rodar como deveria na sua máquina.</li>\n<li>Subir o patch do bug resolvido. -> aqui é importante ter um pouco de familiaridade com git, se você não tem, sugiro começar agora, dá uma olhada nesse <a href=\"http://willianjusten.teachable.com/courses/git-e-github-para-iniciantes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">curso gratuito do Willian Justen.</a> Recomendo super!</li>\n</ul>\n<p>Para vocês veram o tipo de patch que é pedido, eu enviei 2 <em>pull requests</em> (<a href=\"https://github.com/taskcluster/taskcluster-hooks/pull/23\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">esse</a> e <a href=\"https://github.com/taskcluster/taskcluster-auth/pull/54\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">esse</a>) e mandei um <a href=\"https://github.com/mozilla/universal-search/pull/97\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pequeno fix</a> para um outro projeto da Mozilla.</p>\n<p>Todas as pessoas com quem conversei da Mozilla foram super receptivas e atenciosas, então <strong>não</strong> tenha medo de fazer perguntas, nenhuma pergunta é idiota. Mas claro, recomendo você sempre tentar resolver as coisas antes e fazer as perguntas à medida em que ficar bloqueada e não o contrário, perguntar antes de tentar.</p>\n<p>Bem, próximos passos: dia 23/05 começa o programa e aí que meu trabalho começa de fato. Pretendo continuar compartilhando meu processo e aprendizado por aqui, quem sabe não ajuda mais pessoas a se movimentarem e a deixarem de procrastinar um pouco? Além de incentivar mais meninas a virarem desenvolvedoras e se aventurarem no mundo do software livre.</p>\n","excerpt":"","description":"","path":"/back-to-computing/","cover":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy/"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS/"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"2cd5d0f77f86c2df34af4afac12693c5","title":"Como gravar sua tela em gifs animados no Linux","datetime":"2014-06-14 14:30:43","content":"<p><strong>UPDATE 26/06/2017:</strong> Encontrei uma opção bem mais interessante, o <a href=\"https://github.com/phw/peek\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Peek</a> que tem uma interface gráfica simples, mas que nos permite selecionar com o mouse a área que será gravada, além de controlar visualmente o início e fim da gravação. Testei no Fedora 25 e rodou tranquilamente, vale a pena dar uma olhada: <a href=\"https://github.com/phw/peek\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/phw/peek</a></p>\n<hr>\n<p>Todo mundo que me conhece sabe que sou fã incondicional de gifs animados. Ultimamente fui surpreendida pela popularização da utilização de gifs em tutoriais e documentações técnicas, algo que eu ainda não havia pensado sobre mas que achei genial pela simplicidade e eficiência dessa prática. Além de tornar documentações e tutoriais muito mais envolvente. Veja um exemplo que estamos usando na <a href=\"http://escolamupi.com.br\" title=\"Escola Mupi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Escola Mupi</a> (<a href=\"http://line25.com/articles/creative-uses-animated-gifs-present-ui-designs\" title=\"Exemplos de gifs em UX\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">aqui</a> tem uns legais também):</p>\n<p><img src=\"/images/posts/doc-titulo.gif\"></p>\n<p>Existem várias formas de se fazer isso. Você pode, por exemplo, gravar sua tela em video e depois editar exportando para gif (o Adobe Premiere faz isso, Camtasia também, e existem alguns programas só para este fim). Mas como uso Linux, precisei aprender como fazer isso sem esses programas que só rodam no Windows ou Mac OS, e encontrei o Byzanz, que você pode ver seu <a href=\"https://github.com/GNOME/byzanz\" title=\"Código Byzanz\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">código aqui</a>.<br>\nO Byzanz permite gravar a tela diretamente em um gif animado. Como não encontrei muitas informações sobre ele (parece que seu site está fora do ar), resolvi criar esse tutorial para ensinar como utilizá-lo, já que o achei super simples e soluciona muito bem essa necessidade.<br>\n<em>Spoiler</em>: é tudo pela linha de comando então se você, assim como eu, tem muito apego visual, recomendo um pouquinho de paciência que no fim das contas é simples de usar e é possível que você vicie e queira gravar tudo! :)</p>\n<p><strong>1 - Instalar o Byzanz</strong> Abra o seu terminal e execute os passos abaixo para instalar o Byzanz.<br>\nSe você usa Fedora e Gnome, o byzanz já está no repositório do Fedora então basta instalar:</p>\n<pre>$ sudo yum install byzanz</pre>\n<p>No Ubuntu 14.04:</p>\n<pre>$ sudo add-apt-repository ppa:fossfreedom/byzanz\n$ sudo apt-get update\n$ sudo apt-get install byzanz\n</pre>\n<p><strong>2 -</strong> [Opcional] <strong>Instalar o Wmctrl</strong><br>\nEsse passo é mais uma dica, ele não é necessário. Mas através do <a href=\"http://tomas.styblo.name/wmctrl/\" title=\"Wmctrl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wmctrl</a> (um comando que permite você gerenciar suas janelas) a gente consegue experimentar tamanhos e posicionamentos de janelas para definir a área a ser gravada antes de usar o Byzanz.<br>\nPara instalar é igual ao passo 1:</p>\n<ul>\n<li>Para Fedora:</li>\n</ul>\n<pre>$ sudo yum install wmctrl</pre>\n<ul>\n<li>Para Ubuntu:</li>\n</ul>\n<pre>$ sudo apt-get install wmctrl</pre>\n<p>Se não achar o Wmctrl, leia <a href=\"http://www.installion.co.uk/ubuntu/saucy/universe/w/wmctrl/pt/install.html\" title=\"Instalando o Wmdctrl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">este tutorial</a>.</p>\n<p><strong>3 - Definindo o tamanho da janela que você quer gravar.</strong><br>\nCom o Wmctrl fica bem mais fácil essa etapa, por isso o passo dois. A linha abaixo está dizendo para posicionar a janela atual (no caso sua janela do terminal) se posicionar 500 pixels à direita (eixo x), 100 pixels abaixo (eixo y), com a largura (width) de 800 pixels e altura de 600 (altura) pixels. A opção <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">-e</code> significa que ele vai redimensionar a janela com os parâmetros definidos.</p>\n<pre>$ wmctrl -r :ACTIVE: -e 0,500,100,800,600</pre>\n<p>E é só isso que precisamos do Wmctrl, se quiser ver mais opções é só ver o help do Wmctrl com o comando <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">$ wmctrl --help</code>. Agora você pode ficar experimentando os valores até achar o que quer:<br>\n<img src=\"/images/posts/terminal.gif\" alt=\"terminal\"></p>\n<p><strong>4 - Gravando a tela com o byzanz</strong><br>\nCom os valores de tela definido, você posiciona a janela que vai ser gravada, seu navegador por exemplo, no local que ficou sua janela do terminal do passo três.<br>\nO uso do byzanz usa os seguintes parâmetros: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">byzanz-record [opções] nomedoarquivo.gif</code>. No caso do meu exemplo usei o comando abaixo, onde <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">-d 10</code> se refere à duração da gravação e <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">-c</code> que vai gravar o cursor:</p>\n<pre>$ byzanz-record -d 10 -c --x=500 --y=100 --width=800 --height=600 terminal.gif</pre>\n<p>Para conferir o resultado é só ir na pasta onde você salvou e abrir o gif no seu navegador :)<br>\nPara mais opções do byzanz basta acessar seu manual: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">byzanz-record --help</code></p>\n<p>E seu gif está pronto! Simples, não? Eu particularmente achei muito melhor do que depender de editores de videos pesados que demoram pra renderizar e são difíceis de mexer.<br>\nAgora é experimentar, boas gravações!<br>\nAh, e se for gravar pra web só cuidado com o tamanho final dos gifs, afinal cada frame é uma imagem que podem custar caro pra sua performance.</p>\n","excerpt":"","description":"","path":"/como-gravar-sua-tela-em-gifs-animados-no-linux/","cover":"","tags":[{"id":"gifs","title":"gifs","path":"/tag/gifs/"},{"id":"linux","title":"linux","path":"/tag/linux/"},{"id":"tools","title":"tools","path":"/tag/tools/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"43349333e39bb6dc74e2be0b1ac4026b","title":"[tradução] Wireframe, protótipo e mockup – Qual a diferença?","datetime":"2014-04-18 14:30:43","content":"<blockquote>\n<p>Uma das etapas mais fundamentais durante o processo de desenvolvimento de um produto, no nosso caso, web sites ou aplicativos, é a geração de ideias e protótipos. Após compreender o problema que temos que resolver, independente de sua complexidade, é necessário gerar ideias de como será sua solução para então poder implementá-la. Existem várias formas de representar uma ideia e projetar sua solução. O artigo abaixo explica a diferença entre mockups, wireframes e protótipos e é uma tradução livre que fiz do post feito por <a href=\"https://twitter.com/marcintreder\" title=\"Marci Treder\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Marcin Treder</a> no Design Modo. O original pode ser <a href=\"http://designmodo.com/wireframing-prototyping-mockuping/\" title=\"http://designmodo.com/wireframing-prototyping-mockuping/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lido aqui</a>.</p>\n</blockquote>\n<p>\"Alguns anos atrás me dei conta de que muitos amigos meus de TI, não-designers, usam nomenclaturas de design deliberadamente como se fossem sinônimos. Eles assumem que wireframes, protótipos e mockups são exatamente a mesma coisa – um rascunho meio cinza, com várias formas retangulares que representam uma ideia engenhosa.</p>\n<p>O problema com essa visão simplificada é que eles nunca sabem o que esperar do trabalho de um designer de <em>User Experience</em> e muitas vezes ficam confusos. \"Por que raios isso não é clicável?\", \"Bem, eu não sabia que eu deveria clicar aqui...\" - esses são comentários típicos em projetos de UX.</p>\n<p>Confundir wireframes com protótipos é como assumir que uma planta de uma casa e aquelas casas modelo decoradas para amostra são a mesma coisa.</p>\n<p>Embora você provavelmente queira morar numa casa modelo (você sabe, ela é bonita e supostamente mostra o quão legais são as casas na região), você não pode contar com uma estadia confortável numa planta de imóvel – é apenas uma folha de papel.</p>\n<p>Uma casa de showroom e uma planta são diferentes formas de comunicação na área de arquitetura:</p>\n<ul>\n<li>uma planta serve como um plano de construção e deveria especificar como o prédio/casa deveriam ser construídos</li>\n<li>uma casa modelo funciona como um test drive para futuros moradores</li>\n</ul>\n<p>A mesma distinção pode ser feita com wireframes, protótipos e mockups. Eles aparentam diferente, comunicam algo diferente e servem para propósitos diferentes.</p>\n<p>Porém, uma casa modelo e uma planta tem uma coisa em comum: as duas são representações do produto final - uma casa real. E novamente, o mesmo tratamento pode ser aplicado aos wireframes, protótipos e mockups: todos eles são formas de representação do produto final.</p>\n<p>Acredite ou não, a diferença entre um protótipo, um wireframe e um mockup é sempre uma das primeiras coisas que tento ensinar aos membros do meu time de design de UX.<br>\nSim, esse assunto é realmente importante.</p>\n<p>Vamos discutir wireframes, protótipos e mockups em detalhe, assim você poderá entender em quais situações utilizar cada um.</p>\n<h2 id=\"wireframe\"><a href=\"#wireframe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wireframe</h2>\n<p><strong>1. O que é um wireframe?</strong></p>\n<p><strong>Um wireframe é uma representação de baixa fidelidade de um design.</strong> Ele deve mostrar claramente:</p>\n<ul>\n<li>os principais grupos de conteúdo (<strong>o quê?</strong>)</li>\n<li>a estrutura da informação (<strong>onde?</strong>)</li>\n<li>uma descrição e visualização básica da interface e interação do usuário (<strong>como?</strong>)</li>\n</ul>\n<p>Wireframes não são apenas caixas meio sem sentido desenhadas em p&#x26;b, embora pareçam exatamente isso. Considere-os como <strong>o esqueleto do seu design</strong> e lembre-se que os wireframes devem conter a representação de todas as partes importantes do produto final.</p>\n<p><img src=\"/images/posts/UXPin_DM1.jpg\" alt=\"UXPin_DM1\"></p>\n<p>“Representação” é um termo crucial aqui, que te ajuda a encontrar a fidelidade certa – e equilíbrio de velocidade de desenvolvimento. Você não pode mergulhar em muitos detalhes, mas, por outro lado, você precisa criar uma representação sólida do produto final que não sentirá falta de nenhuma parte importante. Você está definindo um caminho para todo o projeto e para as pessoas com quem você trabalha (desenvolvedores, designers gráficos, redatores, gestores de projetos – todos eles precisam de wireframes bem-feitos). Na verdade você está criando o mapa de uma cidade. Cada rua é representada no mapa, porém de uma forma bastante simplificada. Você consegue sentir a arquitetura da cidade ao olhar um mapa, mas não pode ver sua beleza.</p>\n<p>Wireframes devem ser criados num espaço de tempo curto: a maior parte do tempo deve ser gasta na comunicação com seus colegas e… pensando. A simples atividade de criar o wireframe deve ser realmente muito rápida.</p>\n<p>A visualização de um wireframe se dá esteticamente, mas de uma forma bastante simplificada. Preto e branco são as cores típicas que você irá usar (você pode adicionar o azul para especificar os links).</p>\n<p>Se algumas escolhas tomarem bastante tempo (por exemplo a escolha de ícones, subir imagens), você deve representá-las de uma forma primária (ex. utilizando espaços reservados para certos elementos – retângulos vazios com um “X” no meio para imagens acompanhados de uma descrição). Nós costumamos chamar wireframes de “entregáveis de baixa fidelidade” (lo-fi).</p>\n<p>Lembre-se: um wireframe bem-feito deve comunicar o design de uma maneira cristalina e definir o caminho a ser seguido por todo o time.</p>\n<p><strong>2. Quando utilizar wireframes.</strong></p>\n<p>Wireframes normalmente são utilizados como parte da documentação de um projeto. Como eles são estáticos e congelam a interação em um ponto específico no tempo, eles devem ser acompanhados de descrições por escrito (de pequenas anotações explicando as interações até documentações técnicas mais complexas, quando necessário).</p>\n<p>No entanto, eles também podem ser utilizados em situações mais informais. Já que são simples e rápidos de serem feitos, servem também como rascunhos claros para serem usados na comunicação interna do time. Se os desenvolvedores perguntarem como algo deve ser feito, a resposta pode ser dada com a criação rápida de um wireframe.</p>\n<p><em>Considere isso: a <a href=\"http://uxpin.com/\" title=\"UXpin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UXPin</a> é uma start-up com ciclos de desenvolvimentos realmente rápidos (releases a cada dois dias). Nós utilizamos wireframes para a visualização rápida de tarefas (até as pequenas!). Isso elimina desentendimentos e é realmente barato.</em></p>\n<p>Wireframes são dificilmente utilizados como material de teste, ainda que possam ajudar a coletar feedback inicial, estilo guerrilha; ou como uma pesquisa na qual você não se importe muito sobre metodologia, mas sim em conseguir rápidos insights.</p>\n<p>Wireframes inseridos no contexto do processo completo do design podem ser surpreendentemente eficazes e, ainda que nos últimos anos tenham ganhado má reputação, continuam indispensáveis na fase inicial de projetos complexos.</p>\n<h2 id=\"protótipo\"><a href=\"#prot%C3%B3tipo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Protótipo</h2>\n<p><strong>1. O que é um protótipo?</strong></p>\n<p>Um protótipo, muitas vezes confundido com um wireframe, é uma representação de média a alta fidelidade do produto final e que simula a interface de interação do usuário. Ele deve possibilitar ao usuário:</p>\n<ul>\n<li>experimentar o conteúdo e as interações da interface</li>\n<li>testar as principais interações de forma similar ao produto final</li>\n</ul>\n<p>Um protótipo é uma simulação da interação final entre o usuário e a interface. Pode não parecer exatamente com o produto final, mas deve ser bastante similar (definitivamente não é um coisa cinzenta e com cara de rascunho, como são os wireframes). As interações devem ser moldadas com cuidado e apresentar uma semelhança significante com a experiência que o usuário terá no produto final. A interdependência entre a interface e o funcionamento do backend é frequentemente omitida para reduzir custos e acelerar os ciclos de desenvolvimento.<br>\n<strong>2. Quando utilizar um protótipo.</strong></p>\n<p><img src=\"/images/posts/UXPin_DM2.jpg\" alt=\"UXPin_DM2\"></p>\n<p>Protótipos são utilizados em seu máximo potencial nos testes de usuário. A simulação das interações finais geram um ótimo material para testar a usabilidade da interface antes do desenvolvimento iniciar de fato.</p>\n<p>Os protótipos normalmente não são a melhor forma de documentação, já que exigem do “leitor” um certo esforço para entender a interface. Por outro lado, um protótipo é a forma mais engajante de documentação do design, uma vez que a interface é palpável e direta.</p>\n<p>Lembre-se que criar protótipos pode ser caro e consumir bastante tempo. Uma sugestão é criar protótipos que possam ser utilizados no desenvolvimento (sim, isso significa que você deve saber programar um pouco de HTML e CSS). Isso é especificamente eficaz em projetos relativamente simples.</p>\n<p>Feita de forma correta e combinada com testes de usuário, a criação de protótipos consegue pagar seu custo.</p>\n<h2 id=\"mockup-mock-up\"><a href=\"#mockup-mock-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mockup (mock-up)</h2>\n<p><strong>1. O que é um mockup?</strong></p>\n<p>Um mockup é uma representação estática de média a alta fidelidade de um design. Muitas vezes um mockup é um rascunho bem próximo do design final do produto, ou até o próprio design visual do produto final. Um mockup bem feito:</p>\n<ul>\n<li>representa a estrutura da informação, visualiza o conteúdo e demonstra as principais funcionalidades de uma forma estática</li>\n<li>estimula as pessoas a realmente revisarem a parte visual do projeto</li>\n</ul>\n<p>Mockups são muitas vezes confundidos com wireframes, por causa dos nomes de certas empresas de software.<br>\n<strong>2. Quando utilizar um mockup.</strong></p>\n<p><img src=\"/images/posts/UXPin_DM3.jpg\" alt=\"UXPin_DM3\"></p>\n<p>Os mockups são particularmente úteis quando você quer vender a ideia do produto antes dele estar pronto para seu público estratégico (stakeholders). Graças a sua natureza visual, mockups não possuem a resistência dos entregáveis de baixa fidelidade (wireframes) e são bem mais rápidos de criar do que protótipos. Eles são ótimos coletores de feedback e, se inseridos no contexto geral do processo de criação do design, podem criar um bom capítulo da documentação.</p>\n<h2 id=\"resumo\"><a href=\"#resumo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resumo</h2>\n<table class=\"tg\">\n<tbody>\n<tr>\n<th>Representação</th>\n<th>Fidelidade</th>\n<th>Custo</th>\n<th>Uso</th>\n<th>Características</th>\n</tr>\n<tr>\n<td>Wireframe</td>\n<td>baixa</td>\n<td>$</td>\n<td>Documentação, comunicação rápida</td>\n<td>Rascunho, representação preta e branca da interface</td>\n</tr>\n<tr>\n<td>Protótipo</td>\n<td>média a alta</td>\n<td>$</td>\n<td>Teste de usabilidade, esqueleto reutilizável para o desenvolvimento da interface</td>\n<td>Interativo</td>\n</tr>\n<tr>\n<td>Mockup</td>\n<td>média a alta</td>\n<td>$</td>\n<td>Coletar feedback e conseguir vender a ideia do produto</td>\n<td>Visualização estática</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"por-onde-começar\"><a href=\"#por-onde-come%C3%A7ar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Por onde começar?</h2>\n<p>Antes de escolher um meio de comunicação do processo de design você precisa:</p>\n<ul>\n<li>especificar o problema que você está tentando resolver</li>\n<li>entender o seu público-alvo</li>\n<li>dar uma olhada no que os concorrentes tem feito na área</li>\n<li>definir os requisitos gerais do produtos</li>\n</ul>\n<p>Isso é o mínimo. Agora pense qual entregável será mais apropriado para você. Considere seu produto e seu time. O que funcionará melhor para vocês? Uma documentação formal ou rascunhos mais informais e discussões presenciais? Você tem tempo e dinheiro para uma pesquisa mais consistente de usabilidade ou vai apenas a um café local desenhar alguns rascunhos a mão para os seus futuros clientes?</p>\n<p>Quais habilidades você possui? Você sabe programar?</p>\n<p>Olhar para si mesmo(a), seu time e seu projeto deve lhe guiar pelo processo de escolher o melhor entregável.</p>\n<p>Você pode, é claro, criar todos e... na maioria dos casos você vai! Não tenha receio de dar esse passo. Os três fazem sentido e, se forem bem executados, podem te levar a um ótimo produto final.\"</p>\n<p><em>Artigo original: <a href=\"http://designmodo.com/wireframing-prototyping-mockuping/\" title=\"Wireframing, prototyping and mockuping\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://designmodo.com/wireframing-prototyping-mockuping/</a></em></p>\n","excerpt":"","description":"Tradução livre do artigo de Marcin Trader sobre as diferenças enrte wireframe, protótipo e mockup","path":"/wireframe-prototipo-e-mockup-qual-a-diferenca/","cover":"","tags":[{"id":"ux","title":"ux","path":"/tag/ux/"},{"id":"web design","title":"web design","path":"/tag/web%20design/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"5a7842294d21f6e3854895ccd461dc11","title":"Preciso modificar um commit passado, como faz?","datetime":"2014-03-23 14:30:43","content":"<blockquote>\n<p>Nas últimas duas semanas tenho tido um intensivão de aprendizado de git por causa da reformulação do site da <a href=\"http://mupi.me\" title=\"Escola Mupi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Escola Mupi</a>. O projeto usa como base uma plataforma que se chama <a href=\"https://github.com/hacklabr/timtec\" title=\"Timtec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timtec</a>, mas que ainda está sendo desenvolvida, logo muitos bugs, features faltando e muitos <em>merge conflicts</em>... Eu que ainda estou descobrindo as magias do git, tenho uma relacionamento de amor e ódio, pois já fiz muita besteira e perdi muitas horas de trabalho por não saber como ele funciona direito, assim como ele já me salvou muitas vezes &#x3C;3</p>\n<p>Esses dias, precisei adicionar alguns arquivos num commit antigo para manter minha árvore organizada e coerente. Para isso, <a href=\"http://padovan.org\" title=\"Gustavo Padovan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@padovan</a> me ensinou a resolver esse problema usando <strong>fixup</strong> + <strong>rebase interactive</strong> [que eu particularmente achei incrível]. Vamos lá:</p>\n</blockquote>\n<p>Antes de iniciar, você precisa copiar um pedaço inicial do hash do commit que você deseja modificar. O hash é o código de identificação do commit, exemplo: 636bf2643e67bf34f67691333b916e292571a469. No caso os 6 primeiros caracteres já são suficientes. Você pode achar o hash com o comando <span style=\"color: #800000;\"><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log</code></span>.</p>\n<p>Tendo isso copiado, deve-se fazer um \"fake\" commit. Ou seja, criamos um commit que servirá apenas como um repositório temporário das novas modificações que serão acrescentadas ao commit desejado. Para isso usamos o seguinte comando:</p>\n<pre>$ git commit --fixup=636bf26</pre>\n<p>Isso cria um commit com a mensagem \"fixup! + msg do commit selecionado\". Isso ajuda a identificar que esse não é um commit convencional, mas que precisa ser \"fixed up\". Feito isso, agora vem a magia: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase --interactive</code> ou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>. O rebase interactive dá muito mais flexibilidade para modificar os commits. Para usá-lo precisamos indicar a quantidade de últimos commits a serem mostrados a partir do HEAD. No meu caso, os 4 últimos commits foram suficientes:</p>\n<pre>$ git rebase -i HEAD~4</pre>\n<p>que nos dá no editor padrão do terminal a quantidade indicada de commits em ordem do mais antigo ao mais novo, assim como todas as opções do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">rebase interactive</code>. Nesse exemplo só vamos utilizar fixup (note que existem outras opções pra rebase interativo que podem ser muito úteis em outras situações):</p>\n<p><img src=\"http://i.imgur.com/U0abklc.png\"></p>\n<p>Para a magia acontecer, é preciso escrever <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">f</code> no lugar de <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pick</code> na frente do commit de fixup e modificar a ordem dos commits, colocando-o logo abaixo do commit desejado:</p>\n<p><img src=\"http://i.imgur.com/qb8mwCx.png\"></p>\n<p>Agora é só salvar e voi lá! o \"fake\" commit é fundido no commit de cima =) é só dar um checada se deu tudo certo com git log.</p>\n<p>UPDATE: Como pode se ver na primeira imagem, existem outras opções bem interessantes para se usar no rebase interativo, como o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">reword</code>, que permite modificar apenas a mensagem de algum commit, e o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">squash</code> que permite juntar dois ou mais commits em um só. Para quem lê em inglês, sugiro <a href=\"https://help.github.com/articles/interactive-rebase\" title=\"Interactive rebase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">este artigo</a> do github a respeito e dou um quote de alerta (tradução livre minha): \"É considerada uma má prática dar rebase em commits que já foram submetidos ao repositório remoto. Ao fazer isso, você poderá invocar a ira dos deuses do git\".</p>\n<p>obs.: Para modificar o último commit feito, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code> é a melhor opção, já que \"reabre\" o último commit para edição.</p>\n","excerpt":"","description":"Aprenda a usar rebase interativo para modificar um commit do passado","path":"/preciso-modificar-um-commit-passado-como-faz/","cover":"","tags":[{"id":"git","title":"git","path":"/tag/git/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"c1e2088a18deec6f70842f354c8c2293","title":"Learn how to code Javascript by playing a game!","datetime":"2014-02-08 14:30:43","content":"<p><a href=\"http://codecombat.com/\" title=\"CodeCombat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeCombat</a> is a web based game that teaches you how to code with Javascript by playing it and so far, the more I get to know it the more I like it!</p>\n<p><img src=\"http://i.imgur.com/GSuX3la.png\"></p>\n<p>The game has a 2D RPG skin with cute characters and runs directly in the browser. At the beginning it is a bit hard to get used to its UX and for those who are anxious, sorry to tell, but you will have to read the instructions. But when you start to get how it works it gets more fun and without noticing you are learning how to code and hacking the code they give you in order to pass the levels faster.</p>\n<p>The better part of Codecombat I just found out yesterday: the team who built it has <a href=\"http://blog.codecombat.com/we-have-open-sourced-everything\" title=\"Codecombat - We&#x27;ve Open-Sourced Everything\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">open-sourced everything</a>! I have even talked with the team and they are super accessible, they have provided a <a href=\"https://github.com/codecombat/codecombat/wiki/Developer-organization#wiki-communication\" title=\"Developer Organization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">few aways of doing that</a>.</p>\n<p>There are a <a href=\"http://codecombat.com/contribute\" title=\"Contribute to Codecombat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bunch of ways to get involved</a> with the game and helping spread code education out there. So, if you are looking for a free and open-source software to contribute, you should consider this one.</p>\n","excerpt":"","description":"CodeCombat is a web based game that teaches you how to code with Javascript by playing it and so far, the more I get to know it the more I like it!","path":"/learn-javascript-playing/","cover":"","tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"learning","title":"learning","path":"/tag/learning/"},{"id":"code","title":"code","path":"/tag/code/"}],"author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}}]}},"context":{}}
{"hash":"4f7e495cf579bdf3a8f4c48806d06b43e7b94c7b","data":{"tag":{"id":"github","title":"github","path":"/tag/github/","belongsTo":{"totalCount":1,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"f3620e182ebab7c23255a3e1e7170bb6","title":"26 dicas para facilitar sua vida com Git e Github","datetime":"2019-01-16 14:30:43","path":"/26-dicas-para-facilitar-sua-vida-com-git-e-github-parte-1/","content":"<p>Entrei na brincadeira do Twitter compilar dica sobre algum assunto em troca de like ou RT e resolvi falar sobre git e GitHub que √© um assunto que sinto que muita gente tem dificuldade e se voc√™ trabalha com desenvolvimento de software, n√£o importa a linguagem e especialidade, garanto que git √© fundamental pro seu dia-a-dia.</p>\n<blockquote>\n<p>Tamb√©m quero brincar ü§ì</p>\n<p>1 RT = 1 dica de git ou Github</p>\n<p>‚Äî Ana Rute‚Äè üåà (@ana_rute) <a href=\"https://twitter.com/ana_rute/status/1083352112371765248?ref_src=twsrc%5Etfw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">January 10, 2019</a></p>\n</blockquote>\n<p>Segue ent√£o um compilado de 26 dicas sobre Git e GitHub:</p>\n<ol>\n<li>Acabou de dar commit, n√£o deu push ainda mas quer adicionar mais algum arquivo?<br>\n1 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add</code><br>\n2 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code><br>\nO amend modifica o commit passado, ent√£o voc√™ pode inclusive us√°-lo pra remover arquivos do commit, mudar a mensagem, trocar autor, o que quiser!</li>\n<li>Criei um monte de commit que n√£o quero mais, mas n√£o quero perder as mudan√ßas que fiz:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --soft</code><br>\nAs suas mudan√ßas v√£o estar staged, prontas pra serem commitadas novamente</li>\n<li>Quero apagar tudo (commits e mudan√ßas) que fiz e deixar minha branch exatamente igual a um commit espec√≠fico ou branch:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard</code><br>\nSe quiser deixar igual a uma branch remota, pode ser <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard origin/branch</code></li>\n<li>N√£o fa√ßo ideia de como deixei meu repo local nesse estado:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reflog</code><br>\nVai te dar um hist√≥rico do que voc√™ fez</li>\n<li>Mexi um monte num arquivo, mas quero commitar s√≥ uma parte das mudan√ßas:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -p</code><br>\nVai te mostrar peda√ßo por peda√ßo do que voc√™ mudou e te perguntar o que quer colocar em stage</li>\n<li>\n<p>Ao come√ßar um projeto novo, n√£o se esque√ßa de j√° configurar o arquivo .gitignore pra evitar subir arquivos indesejados. Vai ser bem mais f√°cil se j√° fizer do come√ßo do que ter que remover depois ü§ô<br>\nAqui tem um monte de template que d√° pra copiar:</p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/gitignore</a> - A collection of useful .gitignore templates. Contribute to github/gitignore development by creating an account on GitHub.</p>\n</blockquote>\n</li>\n<li>Quero ver o diff inteiro de c√≥digo do que foi feito nos √∫ltimos commits<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log -p</code></li>\n<li>Quero acompanhar o fork de um projeto:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote add &lt;https://url-do-fork.git&gt;</code><br>\nPra ver todos os remotes do repo q vc tem localmente:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote -v</code><br>\nPra usar, √© s√≥ trocar origin pelo nome que voc√™ deu ao remote:<br>\ngit pull , git checkout nome-fork/branch...</li>\n<li>No GitHub, se voc√™ escrever na mensagem do commit \"close\", \"closes\", \"closed\", \"fixes\" ou \"fixed\" seguido de hashtag + n√∫mero da issue (por exemplo: \"Fixes #1234\") , a issue √© automaticamente fechada</li>\n<li>Para quem usa o VS Code, super recomendo o plugin Git Lens. Ele mostra visualmente todo o hist√≥rico de commits do arquivo, quem fez o qu√™ e quando, bem √∫til:<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitLens ‚Äî Git supercharged - Visual Studio Marketplace</a></li>\n<li>Criou uma branch com o nome errado e s√≥ percebeu bem depois, na hora de dar push? no worries:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git branch -m nome-velho nome-novo</code></li>\n<li>Sabia que no GitHub d√° pra usar emoji nas mensagens de commit? Pra usar precisa seguir o modelo \":nome-do-emoji:\"<br>\nPra ser sincera eu n√£o sou muito f√£, mas num projeto mais zuerinha, quem sabe :smile:<br>\n<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aqui tem uma colinha</a>.<br>\nQuem quiser ir al√©m no assunto emoji no commit, d√° uma olhada <a href=\"https://medium.com/walmartlabs/semantic-commit-messages-with-emojis-dba2541cea9a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nesse artigo</a>.</li>\n<li>Vc sabe a diferen√ßa entre git e GitHub? git √© o software de controle de vers√£o, GitHub √© uma plataforma para hospedar projetos que usam git. Fora o GitHub existem outras solu√ß√µes como BitBucket e GitLab, e por ser open source vc pode ter o seu pr√≥prio servidor de git</li>\n<li>Se voc√™ tem dificuldade com vim ou outro editor de linha de comando, √© poss√≠vel trocar o editor padr√£o que o git usa pra escrever as mensagens de commit ou resolver conflitos:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git config --global core.editor &quot;seu-editor&quot;</code></li>\n<li>Eu entendo ter pregui√ßa de adicionar arquivo por arquivo, mas ao inv√©s de dar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code> e vez ou outra subir o que n√£o deve, usa <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -u</code> que ele vai adicionar s√≥ os arquivos que j√° foram trackeados pelo git. Ou melhor, nunca use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code></li>\n<li>Escreva mensagens de commit concisas e espec√≠ficas. Quanto mais detalhada for a descri√ß√£o do commit (to de olho em voc√™ s√≥ usar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit -m</code>), melhor pro seu eu do futuro, principalmente se seu c√≥digo n√£o for muito comentado.</li>\n<li>Eu sou da turma dos micro commits: quanto mais commits melhor. A fun√ß√£o funcionou? commita. O teste passou? commita. Isso ajuda muito no futuro caso tenha que desfazer algo, ca√ßar bugs ou reaproveitar c√≥digo. Mesmo q n√£o esteja 100%, commita com \"WIP\" na frente q √© a dica 18</li>\n<li>Se voc√™ n√£o acabou o que tinha que fazer mas n√£o quer correr o risco de perder o que j√° foi feito, vc pode commitar e na mensagem adicionar \"WIP\" antes, que significa Work in Progress. Quando tiver pronto vc poder dar commit --amend e tirar o WIP da mensagem ;)</li>\n<li>Mais sobre WIP: essa dica √© s√≥ pra quando voc√™ estiver numa branch separada. Se tiver trabalhando com algu√©m na mesma branch, √© bom avisar pra n√£o mandar c√≥digo quebrado pra coleguinha. E evite mandar WIP pra master, j√° que devemos sempre evitar modificar o passado dessa branch</li>\n<li>Se tiver q modificar um commit do passado que √± seja o √∫ltimo, por exemplo pra tirar um commit WIP, a gente usa o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>, que √© o rebase interativo. Esse j√° √© um pouco mais dif√≠cil, eu fiz um post que explica uma das formas de usar: anarute.com/preciso-modifi‚Ä¶</li>\n<li>Use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash</code> pra guardar <em>temporariamente</em> os arquivos modificados q ainda √± foram commitados. √ötil qndo precisa trocar de branch, por ex., testar o c√≥digo sem suas mudan√ßas, ou testar em outra branch. Pra \"pegar\" as mudan√ßas de volta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash pop</code></li>\n<li>Quero pegar s√≥ um commitzinho de uma branch que ainda n√£o t√° em master e jogar na branch que voc√™ est√°:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git cherry-pick</code></li>\n<li>Eu to dando v√°rias dicas e uma galera j√° t√° contribuindo falando outras formas de fazer algo que eu disse. Uma das coisas mais legais de git √© que tem v√°rios caminhos de chegar num mesmo resultado, voc√™ tem q ver o que √© melhor/mais produtivo pro seu fluxo de trabalho</li>\n<li>Eu vejo muita gente que t√° come√ßando tendo que digitar nome e usu√°rio TODA vez que clona, d√° push ou pull. Isso √© porque vc ainda n√£o adicionou uma chave SSH do seu computador no GitHub! Arrumar isso √© facinho: help.github.com/articles/addin‚Ä¶</li>\n<li>Todas as dicas dessa thread s√£o pra usar git na linha de comando. Por isso √© mega importante perder o medo do terminal! Ele n√£o morde, aos pouquinhos a gente se familiariza a ponto de preferir fazer tudo por l√°</li>\n<li>Sobre git e terminal: se vc ainda √± modificou seus dotfiles ou n√£o usa algum tema bonitinho q mostra qual branch vc t√°, status do staging, etc. Recomendo q fa√ßa j√°! Aumenta a produtividade exponencialmente.<br>\nEu uso zsh + oh my zsh + qlqr tema que trate git<br>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link para Oh my Zsh</a></li>\n</ol>\n","excerpt":"","description":"","author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}}]}}},"context":{}}
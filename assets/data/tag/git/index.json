{"hash":"752c6ce69aa6bc2761e11346ad248f842b46c834","data":{"tag":{"id":"git","title":"git","path":"/tag/git/","belongsTo":{"totalCount":3,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"8ab1b61cd15eefb881c2a71a8a716659","title":"Avoid pushing to a wrong remote in a git repo","datetime":"2024-02-23 20:12:19","path":"/avoid-pushing-to-wrong-remote/","content":"<p>If you work with open source, it is possible that in your local repository you\nhave added multiple remotes to work with. Let's say one for upstream and one for\nyour fork.</p>\n<p>More often than I would expect, I end up pushing to upstream (if I have rights\nto the repo) when I wanted to push my fork and it sometimes can be very\nannoying.</p>\n<p>A small trick I've been using to avoid this is simply erasing the push url for\nthe remote I don't want to push directly.</p>\n<p>When you add a remote to your repo with <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote add &lt;remote_name&gt;\n&lt;remote_url&gt;</code>, git sets 2 urls for it: one for fetching changes and another for\npushing. This means for the same remote we could have different urls which gives\nus flexibility to handle our workflow.</p>\n<p>Running <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote -v</code> you can see how the remotes are organized in your local\nrepo and you will see something like:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">‚ï∞‚îÄ‚û§  git remote -v\norigin  git@github.com:anarute/anarute.github.io.git (fetch)\norigin  git@github.com:anarute/anarute.github.io.git (push)\nfork  git@github.com:otheruser/anarute.github.io.git (fetch)\nfork  git@github.com:otheruser/anarute.github.io.git (push)</code>\n<p>As a very simple way to avoid pushing to the remote you don't want, you can\noverride the remote's push url with <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote set-url --push &lt;remote_name&gt;\nno-push</code>, this way even if you try to push to it, git won't find a valid url and\nyou are safe from commiting things to the wrong place.</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">‚ï∞‚îÄ‚û§  git push origin main\nfatal: &#039;no-push&#039; does not appear to be a git repository\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists</code>\n<p>While writing this post it also occurred to me that you can even set the fetch\nurl for the main repo and the push url for you fork, making the work between the\nupstream and fork look like it's the same repo but in reality you are working\nwith two. I can imagine this being a bit radical and can lead to unwanted\nscenarios when for some reason you do need to fetch from the fork, but maybe\nit's worth experimenting and see what suites your workflow better.</p>\n","excerpt":"","description":"Simple trick to avoid pushing to a wrong remote when using multiple remotes in git","author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"f3620e182ebab7c23255a3e1e7170bb6","title":"26 dicas para facilitar sua vida com Git e Github","datetime":"2019-01-16 14:30:43","path":"/26-dicas-para-facilitar-sua-vida-com-git-e-github-parte-1/","content":"<p>Entrei na brincadeira do Twitter compilar dica sobre algum assunto em troca de like ou RT e resolvi falar sobre git e GitHub que √© um assunto que sinto que muita gente tem dificuldade e se voc√™ trabalha com desenvolvimento de software, n√£o importa a linguagem e especialidade, garanto que git √© fundamental pro seu dia-a-dia.</p>\n<blockquote>\n<p>Tamb√©m quero brincar ü§ì</p>\n<p>1 RT = 1 dica de git ou Github</p>\n<p>‚Äî Ana Rute‚Äè üåà (@ana_rute) <a href=\"https://twitter.com/ana_rute/status/1083352112371765248?ref_src=twsrc%5Etfw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">January 10, 2019</a></p>\n</blockquote>\n<p>Segue ent√£o um compilado de 26 dicas sobre Git e GitHub:</p>\n<ol>\n<li>Acabou de dar commit, n√£o deu push ainda mas quer adicionar mais algum arquivo?<br>\n1 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add</code><br>\n2 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code><br>\nO amend modifica o commit passado, ent√£o voc√™ pode inclusive us√°-lo pra remover arquivos do commit, mudar a mensagem, trocar autor, o que quiser!</li>\n<li>Criei um monte de commit que n√£o quero mais, mas n√£o quero perder as mudan√ßas que fiz:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --soft</code><br>\nAs suas mudan√ßas v√£o estar staged, prontas pra serem commitadas novamente</li>\n<li>Quero apagar tudo (commits e mudan√ßas) que fiz e deixar minha branch exatamente igual a um commit espec√≠fico ou branch:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard</code><br>\nSe quiser deixar igual a uma branch remota, pode ser <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard origin/branch</code></li>\n<li>N√£o fa√ßo ideia de como deixei meu repo local nesse estado:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reflog</code><br>\nVai te dar um hist√≥rico do que voc√™ fez</li>\n<li>Mexi um monte num arquivo, mas quero commitar s√≥ uma parte das mudan√ßas:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -p</code><br>\nVai te mostrar peda√ßo por peda√ßo do que voc√™ mudou e te perguntar o que quer colocar em stage</li>\n<li>\n<p>Ao come√ßar um projeto novo, n√£o se esque√ßa de j√° configurar o arquivo .gitignore pra evitar subir arquivos indesejados. Vai ser bem mais f√°cil se j√° fizer do come√ßo do que ter que remover depois ü§ô<br>\nAqui tem um monte de template que d√° pra copiar:</p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/gitignore</a> - A collection of useful .gitignore templates. Contribute to github/gitignore development by creating an account on GitHub.</p>\n</blockquote>\n</li>\n<li>Quero ver o diff inteiro de c√≥digo do que foi feito nos √∫ltimos commits<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log -p</code></li>\n<li>Quero acompanhar o fork de um projeto:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote add &lt;https://url-do-fork.git&gt;</code><br>\nPra ver todos os remotes do repo q vc tem localmente:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote -v</code><br>\nPra usar, √© s√≥ trocar origin pelo nome que voc√™ deu ao remote:<br>\ngit pull , git checkout nome-fork/branch...</li>\n<li>No GitHub, se voc√™ escrever na mensagem do commit \"close\", \"closes\", \"closed\", \"fixes\" ou \"fixed\" seguido de hashtag + n√∫mero da issue (por exemplo: \"Fixes #1234\") , a issue √© automaticamente fechada</li>\n<li>Para quem usa o VS Code, super recomendo o plugin Git Lens. Ele mostra visualmente todo o hist√≥rico de commits do arquivo, quem fez o qu√™ e quando, bem √∫til:<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitLens ‚Äî Git supercharged - Visual Studio Marketplace</a></li>\n<li>Criou uma branch com o nome errado e s√≥ percebeu bem depois, na hora de dar push? no worries:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git branch -m nome-velho nome-novo</code></li>\n<li>Sabia que no GitHub d√° pra usar emoji nas mensagens de commit? Pra usar precisa seguir o modelo \":nome-do-emoji:\"<br>\nPra ser sincera eu n√£o sou muito f√£, mas num projeto mais zuerinha, quem sabe :smile:<br>\n<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aqui tem uma colinha</a>.<br>\nQuem quiser ir al√©m no assunto emoji no commit, d√° uma olhada <a href=\"https://medium.com/walmartlabs/semantic-commit-messages-with-emojis-dba2541cea9a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nesse artigo</a>.</li>\n<li>Vc sabe a diferen√ßa entre git e GitHub? git √© o software de controle de vers√£o, GitHub √© uma plataforma para hospedar projetos que usam git. Fora o GitHub existem outras solu√ß√µes como BitBucket e GitLab, e por ser open source vc pode ter o seu pr√≥prio servidor de git</li>\n<li>Se voc√™ tem dificuldade com vim ou outro editor de linha de comando, √© poss√≠vel trocar o editor padr√£o que o git usa pra escrever as mensagens de commit ou resolver conflitos:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git config --global core.editor &quot;seu-editor&quot;</code></li>\n<li>Eu entendo ter pregui√ßa de adicionar arquivo por arquivo, mas ao inv√©s de dar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code> e vez ou outra subir o que n√£o deve, usa <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -u</code> que ele vai adicionar s√≥ os arquivos que j√° foram trackeados pelo git. Ou melhor, nunca use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code></li>\n<li>Escreva mensagens de commit concisas e espec√≠ficas. Quanto mais detalhada for a descri√ß√£o do commit (to de olho em voc√™ s√≥ usar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit -m</code>), melhor pro seu eu do futuro, principalmente se seu c√≥digo n√£o for muito comentado.</li>\n<li>Eu sou da turma dos micro commits: quanto mais commits melhor. A fun√ß√£o funcionou? commita. O teste passou? commita. Isso ajuda muito no futuro caso tenha que desfazer algo, ca√ßar bugs ou reaproveitar c√≥digo. Mesmo q n√£o esteja 100%, commita com \"WIP\" na frente q √© a dica 18</li>\n<li>Se voc√™ n√£o acabou o que tinha que fazer mas n√£o quer correr o risco de perder o que j√° foi feito, vc pode commitar e na mensagem adicionar \"WIP\" antes, que significa Work in Progress. Quando tiver pronto vc poder dar commit --amend e tirar o WIP da mensagem ;)</li>\n<li>Mais sobre WIP: essa dica √© s√≥ pra quando voc√™ estiver numa branch separada. Se tiver trabalhando com algu√©m na mesma branch, √© bom avisar pra n√£o mandar c√≥digo quebrado pra coleguinha. E evite mandar WIP pra master, j√° que devemos sempre evitar modificar o passado dessa branch</li>\n<li>Se tiver q modificar um commit do passado que √± seja o √∫ltimo, por exemplo pra tirar um commit WIP, a gente usa o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>, que √© o rebase interativo. Esse j√° √© um pouco mais dif√≠cil, eu fiz um post que explica uma das formas de usar: anarute.com/preciso-modifi‚Ä¶</li>\n<li>Use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash</code> pra guardar <em>temporariamente</em> os arquivos modificados q ainda √± foram commitados. √ötil qndo precisa trocar de branch, por ex., testar o c√≥digo sem suas mudan√ßas, ou testar em outra branch. Pra \"pegar\" as mudan√ßas de volta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash pop</code></li>\n<li>Quero pegar s√≥ um commitzinho de uma branch que ainda n√£o t√° em master e jogar na branch que voc√™ est√°:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git cherry-pick</code></li>\n<li>Eu to dando v√°rias dicas e uma galera j√° t√° contribuindo falando outras formas de fazer algo que eu disse. Uma das coisas mais legais de git √© que tem v√°rios caminhos de chegar num mesmo resultado, voc√™ tem q ver o que √© melhor/mais produtivo pro seu fluxo de trabalho</li>\n<li>Eu vejo muita gente que t√° come√ßando tendo que digitar nome e usu√°rio TODA vez que clona, d√° push ou pull. Isso √© porque vc ainda n√£o adicionou uma chave SSH do seu computador no GitHub! Arrumar isso √© facinho: help.github.com/articles/addin‚Ä¶</li>\n<li>Todas as dicas dessa thread s√£o pra usar git na linha de comando. Por isso √© mega importante perder o medo do terminal! Ele n√£o morde, aos pouquinhos a gente se familiariza a ponto de preferir fazer tudo por l√°</li>\n<li>Sobre git e terminal: se vc ainda √± modificou seus dotfiles ou n√£o usa algum tema bonitinho q mostra qual branch vc t√°, status do staging, etc. Recomendo q fa√ßa j√°! Aumenta a produtividade exponencialmente.<br>\nEu uso zsh + oh my zsh + qlqr tema que trate git<br>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link para Oh my Zsh</a></li>\n</ol>\n","excerpt":"","description":"","author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"5a7842294d21f6e3854895ccd461dc11","title":"Preciso modificar um commit passado, como faz?","datetime":"2014-03-23 14:30:43","path":"/preciso-modificar-um-commit-passado-como-faz/","content":"<blockquote>\n<p>Nas √∫ltimas duas semanas tenho tido um intensiv√£o de aprendizado de git por causa da reformula√ß√£o do site da <a href=\"http://mupi.me\" title=\"Escola Mupi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Escola Mupi</a>. O projeto usa como base uma plataforma que se chama <a href=\"https://github.com/hacklabr/timtec\" title=\"Timtec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timtec</a>, mas que ainda est√° sendo desenvolvida, logo muitos bugs, features faltando e muitos <em>merge conflicts</em>... Eu que ainda estou descobrindo as magias do git, tenho uma relacionamento de amor e √≥dio, pois j√° fiz muita besteira e perdi muitas horas de trabalho por n√£o saber como ele funciona direito, assim como ele j√° me salvou muitas vezes &#x3C;3</p>\n<p>Esses dias, precisei adicionar alguns arquivos num commit antigo para manter minha √°rvore organizada e coerente. Para isso, <a href=\"http://padovan.org\" title=\"Gustavo Padovan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@padovan</a> me ensinou a resolver esse problema usando <strong>fixup</strong> + <strong>rebase interactive</strong> [que eu particularmente achei incr√≠vel]. Vamos l√°:</p>\n</blockquote>\n<p>Antes de iniciar, voc√™ precisa copiar um peda√ßo inicial do hash do commit que voc√™ deseja modificar. O hash √© o c√≥digo de identifica√ß√£o do commit, exemplo: 636bf2643e67bf34f67691333b916e292571a469. No caso os 6 primeiros caracteres j√° s√£o suficientes. Voc√™ pode achar o hash com o comando <span style=\"color: #800000;\"><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log</code></span>.</p>\n<p>Tendo isso copiado, deve-se fazer um \"fake\" commit. Ou seja, criamos um commit que servir√° apenas como um reposit√≥rio tempor√°rio das novas modifica√ß√µes que ser√£o acrescentadas ao commit desejado. Para isso usamos o seguinte comando:</p>\n<pre>$ git commit --fixup=636bf26</pre>\n<p>Isso cria um commit com a mensagem \"fixup! + msg do commit selecionado\". Isso ajuda a identificar que esse n√£o √© um commit convencional, mas que precisa ser \"fixed up\". Feito isso, agora vem a magia: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase --interactive</code> ou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>. O rebase interactive d√° muito mais flexibilidade para modificar os commits. Para us√°-lo precisamos indicar a quantidade de √∫ltimos commits a serem mostrados a partir do HEAD. No meu caso, os 4 √∫ltimos commits foram suficientes:</p>\n<pre>$ git rebase -i HEAD~4</pre>\n<p>que nos d√° no editor padr√£o do terminal a quantidade indicada de commits em ordem do mais antigo ao mais novo, assim como todas as op√ß√µes do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">rebase interactive</code>. Nesse exemplo s√≥ vamos utilizar fixup (note que existem outras op√ß√µes pra rebase interativo que podem ser muito √∫teis em outras situa√ß√µes):</p>\n<p><img src=\"http://i.imgur.com/U0abklc.png\"></p>\n<p>Para a magia acontecer, √© preciso escrever <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">f</code> no lugar de <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pick</code> na frente do commit de fixup e modificar a ordem dos commits, colocando-o logo abaixo do commit desejado:</p>\n<p><img src=\"http://i.imgur.com/qb8mwCx.png\"></p>\n<p>Agora √© s√≥ salvar e voi l√°! o \"fake\" commit √© fundido no commit de cima =) √© s√≥ dar um checada se deu tudo certo com git log.</p>\n<p>UPDATE: Como pode se ver na primeira imagem, existem outras op√ß√µes bem interessantes para se usar no rebase interativo, como o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">reword</code>, que permite modificar apenas a mensagem de algum commit, e o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">squash</code> que permite juntar dois ou mais commits em um s√≥. Para quem l√™ em ingl√™s, sugiro <a href=\"https://help.github.com/articles/interactive-rebase\" title=\"Interactive rebase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">este artigo</a> do github a respeito e dou um quote de alerta (tradu√ß√£o livre minha): \"√â considerada uma m√° pr√°tica dar rebase em commits que j√° foram submetidos ao reposit√≥rio remoto. Ao fazer isso, voc√™ poder√° invocar a ira dos deuses do git\".</p>\n<p>obs.: Para modificar o √∫ltimo commit feito, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code> √© a melhor op√ß√£o, j√° que \"reabre\" o √∫ltimo commit para edi√ß√£o.</p>\n","excerpt":"","description":"Aprenda a usar rebase interativo para modificar um commit do passado","author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}}]}}},"context":{}}
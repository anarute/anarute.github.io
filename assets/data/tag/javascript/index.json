{"hash":"752c6ce69aa6bc2761e11346ad248f842b46c834","data":{"tag":{"id":"javascript","title":"javascript","path":"/tag/javascript/","belongsTo":{"totalCount":2,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"19990dbc24ab8f305e1f1ee95a99f671","title":"Primeiros passos com Next.js","datetime":"2020-09-19 10:00:00","path":"/primeiros-passos-com-nextjs/","content":"<p>Cerca de 8 anos atrás (!), para um dos meus trabalhos finais da faculdade eu\ndesenvolvi um site que inicialmente era estátipo \"puro\" (HTML, CSS e js), virou\num Wordpress para que outras pessoas pudessem mexer no conteúdo e finalmente\nfoi abandonado com o passar do tempo a ponto de precisar ser removido ao ser\nhackeado - clássico fim de sites wordpress que não sofrem manutenção frequente.</p>\n<p>Recentemente uma das criadoras do projeto entrou em contato comigo para subirmos\no site novamente e como gosto muito do projeto, topei. Porém, terei que refazer\ndo zero, já que quero que novamente seja estático, sem ter que manter um CMS, nem\nme preocupar com manutençao de servidor, se o site pode ser hackeado, nada disso.</p>\n<p>Ao invés de fazer com js vanilla, resolvi aproveitar a oportunidade pra\nfazer em Next.js e tentar entender porque que esse framework está tão em alta.</p>\n<p>Antes de tudo é importante entender a diferença entre site estático, site\nrenderizado no cliente e renderizado no servidor. Pra isso recomendo <a href=\"https://www.youtube.com/watch?v=X3W-YFe2_io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">o excelente\nvideo do Willian Justen</a>, ele explica de forma super didática essas diferenças e quando usar cada um.</p>\n<h2 id=\"iniciando-o-projeto-em-nextjs\"><a href=\"#iniciando-o-projeto-em-nextjs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Iniciando o projeto em Next.js</h2>\n<p>De cara já fiquei super feliz com o boilerplate do Next.js. Segui a\n<a href=\"https://nextjs.org/docs#setup\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documentação</a> e instalei usando <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">npx create-next-app</code>.\nEle já me deu esqueleto inicial com alguns páginas e até uma mini Rest API. Pro\nmeu projeto atual não vou precisar mas fiquei surpresa quando vi, pode ser bem\nútil em outros projetos.</p>\n<p>Eu gosto muito que o Next.js cuida das rotas baseado na estrutura das pastas sem\na gente precisar configurar nada.</p>\n<h2 id=\"importando-uma-biblioteca-externa-que-é-rendereziada-no-cliente\"><a href=\"#importando-uma-biblioteca-externa-que-%C3%A9-rendereziada-no-cliente\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Importando uma biblioteca externa que é rendereziada no cliente</h2>\n<p>De cara meu primeiro desafio foi lidar com o erro <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ReferenceError: window is not defined</code>.\nEle apareceu quando tentei adicionar ao projeto uma\n<a href=\"http://wavesurfer-js.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">biblioteca externa</a> e inseri como sempre fiz em\nqualquer outro projeto React - instalei com npm/yarn, e dei o import <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">import WaveSurfer from &quot;wavesurfer.js&quot;;</code> e oops:</p>\n<p><img src=\"/images/posts/window-not-defined.png\" alt=\"Window not defined\"></p>\n<p>A principio achei bem esquisito, já que o objeto <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">window</code></a> é basicamente a porta de entrada pro DOM da janela atual\nonde o script está sendo rodado. Como assim ele não foi definido? Imaginei que\npoderia ser algo relacionado ao documento ainda não ter sido renderizado então\nadicionei o componente dentro do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">useEffect</code>, mas continuei com o mesmo problema.\nDepois de ler um pouco sobre que me toquei que esse código provavelmente está\nsendo rodado do lado do servidor! E nesse caso não existe mesmo uma <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">window</code>.</p>\n<p>Aí veio a segunda surpresa boa: a documentação do Next.js é ótima e já tinha uma\n<a href=\"https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">seção só pra isso</a>.\nEu passei por vários artigos e respostas no stackoverflow que\nsó induziam a um ctrl+c ctrl+v sem explicar direito. No fim bastava ler a\ndocumentação para chegar na solução: o que queremos é que esse componente seja\nrenderizado apenas do lado do cliente. Pra isso basta fazer um import dinâmico\ncom a opção <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ssr: false</code>, ou seja, sem renderizar no servidor.</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">const AudioPlayer = dynamic(() =&gt; import(&quot;../components/AudioPlayer&quot;), {\n  ssr: false,\n});</code>\n<p>E o componente AudioPlayer escrevo normal como em qualquer outro projeto React.</p>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>O bom de ter lidado com esse erro logo de cara foi que me fez mudar a forma de\npensar no início do projeto e lembrar que a principal diferença do Next.js e\noutros projetos React é justamente entender que o projeto é renderizado no\nservidor ao invés do cliente, mas ao mesmo tempo ele permite esse dinamismo\nquando precisamos que algo seja renderizado no cliente, dando o melhor dos dois mundos!</p>\n","excerpt":"","description":"","author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}},{"node":{"id":"c1e2088a18deec6f70842f354c8c2293","title":"Learn how to code Javascript by playing a game!","datetime":"2014-02-08 14:30:43","path":"/learn-javascript-playing/","content":"<p><a href=\"http://codecombat.com/\" title=\"CodeCombat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeCombat</a> is a web based game that teaches you how to code with Javascript by playing it and so far, the more I get to know it the more I like it!</p>\n<p><img src=\"http://i.imgur.com/GSuX3la.png\"></p>\n<p>The game has a 2D RPG skin with cute characters and runs directly in the browser. At the beginning it is a bit hard to get used to its UX and for those who are anxious, sorry to tell, but you will have to read the instructions. But when you start to get how it works it gets more fun and without noticing you are learning how to code and hacking the code they give you in order to pass the levels faster.</p>\n<p>The better part of Codecombat I just found out yesterday: the team who built it has <a href=\"http://blog.codecombat.com/we-have-open-sourced-everything\" title=\"Codecombat - We&#x27;ve Open-Sourced Everything\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">open-sourced everything</a>! I have even talked with the team and they are super accessible, they have provided a <a href=\"https://github.com/codecombat/codecombat/wiki/Developer-organization#wiki-communication\" title=\"Developer Organization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">few aways of doing that</a>.</p>\n<p>There are a <a href=\"http://codecombat.com/contribute\" title=\"Contribute to Codecombat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bunch of ways to get involved</a> with the game and helping spread code education out there. So, if you are looking for a free and open-source software to contribute, you should consider this one.</p>\n","excerpt":"","description":"CodeCombat is a web based game that teaches you how to code with Javascript by playing it and so far, the more I get to know it the more I like it!","author":{"id":"anarute","title":"anarute","path":"/author/anarute/"}}}]}}},"context":{}}
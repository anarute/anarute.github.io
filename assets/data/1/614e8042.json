{"data":{"author":{"id":"anarute","title":"anarute","path":"/author/anarute","belongsTo":{"totalCount":12,"pageInfo":{"totalPages":2,"currentPage":1},"edges":[{"node":{"id":"4761b34ad1a7c2ceb12101e3d2a606eb","title":"Minha saga com pytest e SQLAlchemy em uma aplicação FastAPI","datetime":"2020-07-25 10:00:00","path":"/minha-saga-com-pytest-e-sqlalchemy","content":"<p><strong>TLDR:</strong> meu causo sobre aprender <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> na marra. Os primeiros parágrafos são\nintrodutórios, se quiser pular pra parte técnica pode ir direto pro <strong>Perrengue 1</strong>.</p>\n<p>Desde que voltei a trabalhar full-time como desenvolvedora (há uns 3 anos), tive\nque reaprender muita coisa e não posso mais me dar ao luxo de continuar com\nalguns gaps teóricos importantes de computação, já que hoje ocupo uma\nposição de tech lead e por estar em um time pequeno, preciso pensar em\narquiteturas de ponta a ponta em stacks diferentes e pra mim o mais difícil:\ndo zero. Decidi então seguir a onda de aprender em público e começa a escrever\nsobre meus aprendizados, quem sabe não ajuda mais alguém que passe pelo mesmo caminho.</p>\n<p>Em quase todos os meus trabalhos passados eu sempre entrei em projetos existentes\no que torna muito mais fácil desenvolver novas features, já que temos no próprio\nrepositório exemplos de como fazer algo. Mas e quando precisamos escolher\ntodas as ferramentas e configurar tudo do início? As vezes pode ser um trabalho\nbem sofrido e moroso. É por isso que ferramentas como <a href=\"https://reactjs.org/docs/create-a-new-react-app.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Create\nReact App</a>, <a href=\"https://www.djangoproject.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Django</a>, e <a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FastAPI</a> (minha favorita da vez) fazem tanto sucesso.</p>\n<p>Estou trabalhando em uma API RESTFul criada com o FastAPI. Conseguimos portar uma\nAPI feita em Flask pra FastAPI em apenas ~2 semanas em duas pessoas (!), nada contra Flask, mas por ser tão minimalista, ter que configurar coisas como documentação com especificação OpenAPI, um bom suporte pra gestão do banco de dados e concorrencia estava tomando tempo e exigindo um bom tempo de estudo pra fazer uma trabalho bem feito. E foi nisso que o FastAPI nos conquistou! Ele entrega tudo isso de fábrica.</p>\n<p><strong>Disclaimer</strong>: acho super importante gastar tempo aprendendo pra fazer algo bem\npensado, mas a gente sabe que no dia a dia do trabalho a realidade é outra, né? na maior parte das vezes, independente da cultura da sua empresa, o tempo de estudo é limitado e precisamos entregar o que foi pedido num certo período de tempo.</p>\n<p>Comecei então a configurar os testes. Quando o projeto foi feito em Flask tinha\npouquissima cobertura e a configuração do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> não estava muito legal então\nresolvi jogar essa parte fora e começar o setup dos testes do zero.</p>\n<p>Eu adoro criar testes mas até então só tinha mexido na parte de escrever os casos\nde teste mesmo então sempre começava já com ctrl+c, ctrl+v de um teste existente e adaptava pro caso que queria. Também não tinha experiência com <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> ainda.</p>\n<p>Vendo a documentação do FastAPI, rodar testes com <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> no projeto é bem trivial, usei o exemplo padrão e funcionou de primeira, achei que tivesse pronta pra escrever os casos. O projeto usa SQLAlchemy com mysql pra produção e pros testes optei\npor sqlite.</p>\n<p>Mas aí é quando as dificuldades começam, quando precisamos adaptar pro nosso cenário.\nMinhas necessidades eram:</p>\n<ul>\n<li>Iniciar os testes com a banco populado com alguns registros</li>\n<li>O banco precisa ser limpo e populado com os valores iniciais a cada teste, pra\nque nenhum teste interfira no outro</li>\n</ul>\n<p>Achei que seria simples e acharia muitos exemplos por aí, mas conseguir o que\nqueria me custou muitas horas a mais do que eu esperava.</p>\n<h2 id=\"perrengue-1-entendendo-como-isolar-os-ambientes\"><a href=\"#perrengue-1-entendendo-como-isolar-os-ambientes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Perrengue 1 (entendendo como isolar os ambientes)</h2>\n<blockquote>\n<p>Ao rodar os testes em um ambiente limpo (no gitlab CI), dava erro por não\nconseguir se conectar ao banco.</p>\n</blockquote>\n<p>Primeiro, por que que ao rodar os testes ele tenta acessar o banco configurado no\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.env</code> se eu configuro o sqlite espeficamente pros testes? e segundo, porque local funciona e no docker do CI não?</p>\n<p>Pela documentaçao do FastAPI, eles recomendam usar o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">create_all</code> do SQLAlchemy\npara criar todas as tabelas <a href=\"https://fastapi.tiangolo.com/tutorial/sql-databases/#create-the-database-tables\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">antes de iniciar a aplicação</a>. O problema é que fazer\nexatamente assim faz com que o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">create_all</code> seja chamado, só pelo fato de importar o app pros testes. Então a solução foi isolar\no <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">create_all</code> de modo que ele fosse chamado apenas ao rodar a aplicação real, e\nnão com os testes. Isso também explica porque local funcionava e no CI não: local\neu tinha as variaveis de ambiente configuradas corretamente então a conexão com\no banco era bem sucedida mesmo que pros testes fosse usado um banco sqlite.</p>\n<h2 id=\"perrengue-2-entendendo-pytestfixture\"><a href=\"#perrengue-2-entendendo-pytestfixture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Perrengue 2 (entendendo pytest.fixture)</h2>\n<blockquote>\n<p>Não consigo conectar ao banco dentro de uma pytest.fixture</p>\n</blockquote>\n<p>Eu sou super defensora de ler a documentação e li e reli a documentação do\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> umas 5 vezes pra entender o que eu tinha feito errado. Mas às\nvezes mesmo lendo a documentação, se a gente não tem ideia do que está\nacontencedo a doc simplesmente não faz sentido, pelo menos acontece muito comigo,\neu leio as palavras mas nada acontece na minha cabeça, não absorvo o sentido.\nEntão o que percebi que funciona pra mim é um mix de brute force com documentação:\nlê a doc, experimenta um parâmetro ou propriedade diferente, testa e vê o que acontece, repete até entender.</p>\n<p>Baseada na doc do FastAPI, eu tentei usar a mesma função pra conectar ao banco que a aplicação usava, que é algo assim:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">get_db</span><span style=\"color: #24292EFF\">():</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">try</span><span style=\"color: #24292EFF\">:</span>\n<span style=\"color: #24292EFF\">        db </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">TestingSessionLocal()</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># sessão criada com sessionmaker do SQLAlchemy</span>\n<span style=\"color: #24292EFF\">        </span><span style=\"color: #D32F2F\">yield</span><span style=\"color: #24292EFF\"> db</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">finally</span><span style=\"color: #24292EFF\">:</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">close()</span></code></pre>\n<p>Eu tentei fazer com que isso fosse uma fixture com o parametro <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">autouse=True</code>\npra que fosse chamada dentro de cada teste e assim eu poder usar o banco como <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db</code>\npra importar os dados que eu queria e inserir o registros iniciais. Mas ao usar\nassim recebia o erro: </p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">yield_fixture function has more than one &#039;yield&#039;</code>\n<p>E também passei pelo erro abaixo ao tentar faz algo como <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db = get_db()</code> dentro da fixture:</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">Fixture &quot;get_db&quot; called directly. Fixtures are not meant to be called directly,\nbut are created automatically when test functions request them as parameters.\nSee https://docs.pytest.org/en/latest/fixture.html for more information about fixtures, and\nhttps://docs.pytest.org/en/latest/deprecations.html#calling-fixtures-directly about how to update your code.</code>\n<p>Hmm.. os links que o erro sugere na doc explicam bem sobre o erro acima, mas o que será uma <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">yield_fixture</code>? e foi essa dúvida que fez as mil vezes que li\na documentação fazer algum sentido! Basicamente entendi que a <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> funciona como\num \"envelope\" ao redor do teste, seguindo o seguinte padrão:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6F42C1\">@pytest.fixture</span>\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> minha_fixture:</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># insira qualquer lógica pra ser executada ANTES do teste</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">yield</span><span style=\"color: #24292EFF\">  </span><span style=\"color: #6A737D\"># (!!) é esse yield que vai retornar o teste e faze-lo rodar</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># insira a lógica de tear down, pra ser executada DEPOIS do test</span>\n\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">test_case_xis</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #FF9800\">minha_fixture</span><span style=\"color: #24292EFF\">):</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">assert</span><span style=\"color: #24292EFF\"> a </span><span style=\"color: #D32F2F\">==</span><span style=\"color: #24292EFF\"> b</span></code></pre>\n<p>Então a <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> realmente era o que eu precisava.</p>\n<p>Quando eu chamava o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">yield db</code> lá em cima no <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">get_db</code>, o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest</code> tentava\nrodar o teste e nunca chegaria no segundo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">yield</code> que roda o teste de fato,\nentão o que eu gostaria que acontecesse no setup não tava acontecendo.</p>\n<p>A solução foi bem simples, eu não precisava de uma função pra acessar o banco, bastava rodar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db = TestingSessionLocal()</code> onde esse <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">TestingSessionLocal</code> é uma sessão criada pelo SQLAlchemy e no tear down do teste, dar um <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">db.close()</code>. Isso resolveu meu caso\nde acessar o banco, limpa-lo e inserir os dados falsos antes de cada teste.\nFicou algo assim:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #6F42C1\">@pytest.fixture</span><span style=\"color: #24292EFF\">(</span><span style=\"color: #6F42C1\">autouse</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #1976D2\">True</span><span style=\"color: #24292EFF\">)</span>\n<span style=\"color: #D32F2F\">def</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">init_db</span><span style=\"color: #24292EFF\">():</span>\n<span style=\"color: #24292EFF\">    db </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">TestingSessionLocal()</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># Clean up tables before importing the initial data</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">query(MyModel)</span><span style=\"color: #24292EFF\">.</span><span style=\"color: #6F42C1\">delete()</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">commit()</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6A737D\"># Insert mock data in the db</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">for</span><span style=\"color: #24292EFF\"> r </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> fake_records:</span>\n<span style=\"color: #24292EFF\">        new_record </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">MyModel(</span><span style=\"color: #D32F2F\">**</span><span style=\"color: #6F42C1\">r)</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">add(new_record)</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">commit()</span>\n<span style=\"color: #24292EFF\">        db.</span><span style=\"color: #6F42C1\">refresh(new_record)</span>\n\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #D32F2F\">yield</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># run the test</span>\n\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">close()</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6A737D\"># close session after running the test</span></code></pre>\n<h2 id=\"perrengue-3-entendendo-como-funcionam-os-models-do-sqlalchemy\"><a href=\"#perrengue-3-entendendo-como-funcionam-os-models-do-sqlalchemy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Perrengue 3 (entendendo como funcionam os models do SQLAlchemy)</h2>\n<blockquote>\n<p>Consegui popular o banco antes de um teste, fui replicar o mesmo teste e no\nsegundo caso os valores do primeiro teste ainda estavam no banco</p>\n</blockquote>\n<p>Depois de finalmente entender como <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pytest.fixture</code> funciona, comecei a ter problemas ao inserir mais casos de teste. Usando nosso amigo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">print</code> a impressão que dava era que a fixture só era acessada no primeiro caso. Isso me levou a pesquisar sobre\ncache de fixture, como que as fixtures era chamadas, etc, sem sucesso.</p>\n<p>Usando <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdb</code> eu consegui confirmar que a fixture estava sendo chamada a cada teste, então por que raios o banco não estava sendo limpo?</p>\n<p>Foi aí que comecei a desconfiar que o problema não era mais a fixture e precisei entender melhor como o SQLAlchemy lida com sessões\ne gerencia o banco em tempo de execução. Recomendo <a href=\"https://www.michaelcho.me/article/sqlalchemy-commit-flush-expire-refresh-merge-whats-the-difference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">esse artigo</a> sobre isso.</p>\n<p>Pra inserir os dados fakes, eu criei um array com meus models já usando o model\nda aplicação, algo como:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">users </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6F42C1\">MyModel(id</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #1976D2\">1</span><span style=\"color: #6F42C1\">, name</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #22863A\">\"ABC\"</span><span style=\"color: #6F42C1\">)</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">    </span><span style=\"color: #6F42C1\">MyModel(id</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #1976D2\">2</span><span style=\"color: #6F42C1\">, name</span><span style=\"color: #D32F2F\">=</span><span style=\"color: #22863A\">\"XYZ\"</span><span style=\"color: #6F42C1\">)</span><span style=\"color: #24292EFF\">,</span>\n<span style=\"color: #24292EFF\">]</span></code></pre>\n<p>E na minha fixture:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">for</span><span style=\"color: #24292EFF\"> user </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> users:</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">add(user)</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">commit()</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">refresh(user)</span></code></pre>\n<p>O primeiro teste a ser rodado SEMPRE dava certo, mas do segundo em diante não.\nEu não conseguia entender o que estava fazendo de errado até tentar entender como\no meu model estava sendo criado: o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">MyModel</code> é uma classe que herda o Base da aplicação que no fundo é um <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">declarative_base</code> do SQLAlchemy. Ah-há! eu\nachava que eu estava só declarando um array de objetos do tipo MyModel, mas na\nverdade ao criar esse array o SQLAlchemy já estava instanciando esses objetos\ncomo parte dos dados da sessão aberta mesmo que eles não tivessem sido inseridos no banco!</p>\n<p>Então ao rodar esse <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">for</code> mais de uma vez o SQLAlchemy reclamava porque o objeto já tinha sido inserido em algum momento então ele não inseria de novo, por isso eu lidava com erros como:\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Object already attached to session</code> ou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">sqlalchemy.exc.InvalidRequestError: Could not refresh instance</code>. Tudo porque eu estava tentando inserir um objeto que ja tinha sido\ninserido no banco E já tinha sido deletado, porque eu deleto tudo antes de rodar os testes, lembra?</p>\n<p>Depois de entender tudo isso fez sentido, eu não preciso ter um array de models reais\npra meus dados falsos antes de criá-los, eu posso ter um array de dicts e na hora de inserir no banco que crio o objeto de verdade, então por fim a solução foi:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">users </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> [</span>\n<span style=\"color: #24292EFF\">    {</span><span style=\"color: #22863A\">\"id\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"name\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #22863A\">\"ABC\"</span><span style=\"color: #24292EFF\">},</span>\n<span style=\"color: #24292EFF\">    {</span><span style=\"color: #22863A\">\"id\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #1976D2\">1</span><span style=\"color: #24292EFF\">, </span><span style=\"color: #22863A\">\"name\"</span><span style=\"color: #24292EFF\">:</span><span style=\"color: #22863A\">\"XYZ\"</span><span style=\"color: #24292EFF\">},</span>\n<span style=\"color: #24292EFF\">]</span></code></pre>\n<p>E na minha fixture:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #D32F2F\">for</span><span style=\"color: #24292EFF\"> user </span><span style=\"color: #D32F2F\">in</span><span style=\"color: #24292EFF\"> users:</span>\n<span style=\"color: #24292EFF\">    new_user </span><span style=\"color: #D32F2F\">=</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #6F42C1\">MyModel(</span><span style=\"color: #D32F2F\">**</span><span style=\"color: #6F42C1\">user)</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">add(new_user)</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">commit()</span>\n<span style=\"color: #24292EFF\">    db.</span><span style=\"color: #6F42C1\">refresh(new_user)</span></code></pre>\n<p>Pronto, agora sim posso ter mil testes todos isolados com o banco limpo e dados\ninciais antes de rodar :)</p>\n<h2 id=\"conclusão\"><a href=\"#conclus%C3%A3o\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Conclusão</h2>\n<p>Ficar na superfície pode cobrir a maior parte dos casos, mas assim que precisamos de algo que foge do básico ou da configuração que \"vem pronta\" (mesmo que não seja nada extraordinário, como foi meu caso), não tem stackoverflow que salve e precisamos entender de fato o que está acontecendo por baixo dos panos. Pra mim o combo ler documentação + um bom tempo com debug e experimentação é a melhor forma de aprender.</p>\n<p>Agora posso finalemente focar em escrever os testes de fato e garantir que minha aplicação funciona como esperado.</p>\n<hr>\n<p>Se eu falei alguma bobeira ou você sabe uma forma melhor de solucionar os casos\nque mencionei no post, deixa seu comentário aí embaixo ;)</p>\n","excerpt":"","description":"","tags":[{"id":"pt-br","title":"pt-br","path":"/tag/pt-br"},{"id":"python","title":"python","path":"/tag/python"},{"id":"pytest","title":"pytest","path":"/tag/pytest"},{"id":"sqlalchemy","title":"sqlalchemy","path":"/tag/sqlalchemy"},{"id":"carreira","title":"carreira","path":"/tag/carreira"}]}},{"node":{"id":"f3620e182ebab7c23255a3e1e7170bb6","title":"26 dicas para facilitar sua vida com Git e Github","datetime":"2019-01-16 14:30:43","path":"/26-dicas-para-facilitar-sua-vida-com-git-e-github-parte-1","content":"<p>Entrei na brincadeira do Twitter compilar dica sobre algum assunto em troca de like ou RT e resolvi falar sobre git e GitHub que é um assunto que sinto que muita gente tem dificuldade e se você trabalha com desenvolvimento de software, não importa a linguagem e especialidade, garanto que git é fundamental pro seu dia-a-dia.</p>\n<blockquote>\n<p>Também quero brincar 🤓</p>\n<p>1 RT = 1 dica de git ou Github</p>\n<p>— Ana Rute‏ 🌈 (@ana_rute) <a href=\"https://twitter.com/ana_rute/status/1083352112371765248?ref_src=twsrc%5Etfw\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">January 10, 2019</a></p>\n</blockquote>\n<p>Segue então um compilado de 26 dicas sobre Git e GitHub:</p>\n<ol>\n<li>Acabou de dar commit, não deu push ainda mas quer adicionar mais algum arquivo?<br>\n1 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add</code><br>\n2 - <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code><br>\nO amend modifica o commit passado, então você pode inclusive usá-lo pra remover arquivos do commit, mudar a mensagem, trocar autor, o que quiser!</li>\n<li>Criei um monte de commit que não quero mais, mas não quero perder as mudanças que fiz:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --soft</code><br>\nAs suas mudanças vão estar staged, prontas pra serem commitadas novamente</li>\n<li>Quero apagar tudo (commits e mudanças) que fiz e deixar minha branch exatamente igual a um commit específico ou branch:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard</code><br>\nSe quiser deixar igual a uma branch remota, pode ser <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reset --hard origin/branch</code></li>\n<li>Não faço ideia de como deixei meu repo local nesse estado:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git reflog</code><br>\nVai te dar um histórico do que você fez</li>\n<li>Mexi um monte num arquivo, mas quero commitar só uma parte das mudanças:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -p</code><br>\nVai te mostrar pedaço por pedaço do que você mudou e te perguntar o que quer colocar em stage</li>\n<li>\n<p>Ao começar um projeto novo, não se esqueça de já configurar o arquivo .gitignore pra evitar subir arquivos indesejados. Vai ser bem mais fácil se já fizer do começo do que ter que remover depois 🤙<br>\nAqui tem um monte de template que dá pra copiar:</p>\n<blockquote>\n<p><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github/gitignore</a> - A collection of useful .gitignore templates. Contribute to github/gitignore development by creating an account on GitHub.</p>\n</blockquote>\n</li>\n<li>Quero ver o diff inteiro de código do que foi feito nos últimos commits<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log -p</code></li>\n<li>Quero acompanhar o fork de um projeto:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote add &lt;https://url-do-fork.git&gt;</code><br>\nPra ver todos os remotes do repo q vc tem localmente:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git remote -v</code><br>\nPra usar, é só trocar origin pelo nome que você deu ao remote:<br>\ngit pull , git checkout nome-fork/branch...</li>\n<li>No GitHub, se você escrever na mensagem do commit \"close\", \"closes\", \"closed\", \"fixes\" ou \"fixed\" seguido de hashtag + número da issue (por exemplo: \"Fixes #1234\") , a issue é automaticamente fechada</li>\n<li>Para quem usa o VS Code, super recomendo o plugin Git Lens. Ele mostra visualmente todo o histórico de commits do arquivo, quem fez o quê e quando, bem útil:<br>\n<a href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitLens — Git supercharged - Visual Studio Marketplace</a></li>\n<li>Criou uma branch com o nome errado e só percebeu bem depois, na hora de dar push? no worries:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git branch -m nome-velho nome-novo</code></li>\n<li>Sabia que no GitHub dá pra usar emoji nas mensagens de commit? Pra usar precisa seguir o modelo \":nome-do-emoji:\"<br>\nPra ser sincera eu não sou muito fã, mas num projeto mais zuerinha, quem sabe :smile:<br>\n<a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Aqui tem uma colinha</a>.<br>\nQuem quiser ir além no assunto emoji no commit, dá uma olhada <a href=\"https://medium.com/walmartlabs/semantic-commit-messages-with-emojis-dba2541cea9a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nesse artigo</a>.</li>\n<li>Vc sabe a diferença entre git e GitHub? git é o software de controle de versão, GitHub é uma plataforma para hospedar projetos que usam git. Fora o GitHub existem outras soluções como BitBucket e GitLab, e por ser open source vc pode ter o seu próprio servidor de git</li>\n<li>Se você tem dificuldade com vim ou outro editor de linha de comando, é possível trocar o editor padrão que o git usa pra escrever as mensagens de commit ou resolver conflitos:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git config --global core.editor &quot;seu-editor&quot;</code></li>\n<li>Eu entendo ter preguiça de adicionar arquivo por arquivo, mas ao invés de dar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code> e vez ou outra subir o que não deve, usa <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add -u</code> que ele vai adicionar só os arquivos que já foram trackeados pelo git. Ou melhor, nunca use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git add .</code></li>\n<li>Escreva mensagens de commit concisas e específicas. Quanto mais detalhada for a descrição do commit (to de olho em você só usar <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit -m</code>), melhor pro seu eu do futuro, principalmente se seu código não for muito comentado.</li>\n<li>Eu sou da turma dos micro commits: quanto mais commits melhor. A função funcionou? commita. O teste passou? commita. Isso ajuda muito no futuro caso tenha que desfazer algo, caçar bugs ou reaproveitar código. Mesmo q não esteja 100%, commita com \"WIP\" na frente q é a dica 18</li>\n<li>Se você não acabou o que tinha que fazer mas não quer correr o risco de perder o que já foi feito, vc pode commitar e na mensagem adicionar \"WIP\" antes, que significa Work in Progress. Quando tiver pronto vc poder dar commit --amend e tirar o WIP da mensagem ;)</li>\n<li>Mais sobre WIP: essa dica é só pra quando você estiver numa branch separada. Se tiver trabalhando com alguém na mesma branch, é bom avisar pra não mandar código quebrado pra coleguinha. E evite mandar WIP pra master, já que devemos sempre evitar modificar o passado dessa branch</li>\n<li>Se tiver q modificar um commit do passado que ñ seja o último, por exemplo pra tirar um commit WIP, a gente usa o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>, que é o rebase interativo. Esse já é um pouco mais difícil, eu fiz um post que explica uma das formas de usar: anarute.com/preciso-modifi…</li>\n<li>Use <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash</code> pra guardar <em>temporariamente</em> os arquivos modificados q ainda ñ foram commitados. Útil qndo precisa trocar de branch, por ex., testar o código sem suas mudanças, ou testar em outra branch. Pra \"pegar\" as mudanças de volta <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git stash pop</code></li>\n<li>Quero pegar só um commitzinho de uma branch que ainda não tá em master e jogar na branch que você está:<br>\n<code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git cherry-pick</code></li>\n<li>Eu to dando várias dicas e uma galera já tá contribuindo falando outras formas de fazer algo que eu disse. Uma das coisas mais legais de git é que tem vários caminhos de chegar num mesmo resultado, você tem q ver o que é melhor/mais produtivo pro seu fluxo de trabalho</li>\n<li>Eu vejo muita gente que tá começando tendo que digitar nome e usuário TODA vez que clona, dá push ou pull. Isso é porque vc ainda não adicionou uma chave SSH do seu computador no GitHub! Arrumar isso é facinho: help.github.com/articles/addin…</li>\n<li>Todas as dicas dessa thread são pra usar git na linha de comando. Por isso é mega importante perder o medo do terminal! Ele não morde, aos pouquinhos a gente se familiariza a ponto de preferir fazer tudo por lá</li>\n<li>Sobre git e terminal: se vc ainda ñ modificou seus dotfiles ou não usa algum tema bonitinho q mostra qual branch vc tá, status do staging, etc. Recomendo q faça já! Aumenta a produtividade exponencialmente.<br>\nEu uso zsh + oh my zsh + qlqr tema que trate git<br>\n<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link para Oh my Zsh</a></li>\n</ol>\n","excerpt":"","description":"","tags":[{"id":"git","title":"git","path":"/tag/git"},{"id":"github","title":"github","path":"/tag/github"},{"id":"dicas","title":"dicas","path":"/tag/dicas"}]}},{"node":{"id":"08d6fa1ed3b0b9a9b4632ed5fde766ec","title":"Como restaurar backups em um banco PostgreSQL","datetime":"2017-02-24 14:30:43","path":"/como-restaurar-backups-em-um-banco-postgresql","content":"<p>De tempos em tempos eu preciso restaurar um backup de algum banco para outro ou\npreencher o banco de um novo ambiente de desenvolvimento local com dados\npara testes. Como não é uma tarefa diária, nem sempre me lembro como faz, então\nresolvi juntar aqui o passo a passo até pra facilitar nas próximas vezes e talvez\npossa também ajudar alguém.</p>\n<p>Antes de poder restaurar algum backup, precisamos crear o dump! O comando utilizado\npara isso é o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pg_dump</code> que já nos devolve um <em>dump</em> da tabela inteira - se\nquiser saber mais <a href=\"https://www.postgresql.org/docs/current/static/app-pgdump.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">clique aqui</a>\npara ler a documentação.</p>\n<pre>pg_dump dbname > backupfile.sql</pre>\n<p>No comando acima, extraímos todos os dados do banco (troque <em>dbname</em> pelo nome\nda sua tabela) e jogamos em um arquivo <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.sql</code>. Pronto, já temos o backup salvo.\n<strong>Dica:</strong> esse é um jeito bem fácil de manter backup de seus bancos. Recomendo\ncriar um comando que faça esse backup e utilizar o\n<a href=\"https://help.ubuntu.com/community/CronHowto\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cron</a> para fazer isso\nautomaticamente sempre.</p>\n<p>Para restaurar o backup num banco, o postegres também nos permite fazer isso de\num jeito bem simples, mas tem alguns detalhes:</p>\n<ol>\n<li>o banco precisa existir com o mesmo nome do banco que foi extraído.</li>\n<li>o banco não pode ter as tabelas criadas, senão vai dar conflito e a\nrestauração não vai dar certo.</li>\n</ol>\n<p>Nesse caso, se o banco já existir primeiro eu dou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">dropdb db_name</code> que vai\ndeletar o banco (<strong>IMPORTANTE</strong>, eu só faço isso em bancos locais, porque isso\napaga <strong>todos os dados</strong> do banco, então <strong>NUNCA</strong> faça isso em produção a menos\nque você saiba exatamente o que está fazendo. Dá justa causa, hein? Deus tá\nvendo). Depois de deletar, precisamos recriá-la senão a restauração não vai\nfuncionar por não encontrar o banco. Para recriá-lo: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">createdb db_name</code></p>\n<p>Por fim, para restaurar os dados, jogamos o arquivo no novo banco:</p>\n<pre>psql dbname < infile</pre>\n<p>Pronto, temos um banco restaurado! Para mim esse processo é fundamental em dois\nmomentos: quando por algum motivo - normalmente tenso - eu preciso restaurar o\nbanco em produção ou quando vou começar um novo ambiente de desenvolvimento e\npreciso de dados para testar o app e as mudanças que estou fazendo.</p>\n","excerpt":"","description":"Guia básico para criar e restaurar um dump de um banco em PostgreSQL","tags":[{"id":"sysadmin","title":"sysadmin","path":"/tag/sysadmin"},{"id":"postgresql","title":"postgresql","path":"/tag/postgresql"},{"id":"databases","title":"databases","path":"/tag/databases"},{"id":"db","title":"db","path":"/tag/db"}]}},{"node":{"id":"82338461f4fe3f4c963d8ca004c2949c","title":"Farewell Mozilla - or how it went fast!","datetime":"2016-08-23 14:30:43","path":"/farewell-mozilla-and-outreachy-or-how-it-went-fast","content":"<p>Wow, how fast can 3 months go? 3 months ago I was extremely happy and anxious about how I was going to manage to become a web dev intern at a <a href=\"http://anarute.com/getting-started-with-taskcluster/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">project I knew nothing about</a> and to really work as a developer in a company that I admire since I'm an internet user.</p>\n<p>Suddenly, here I am preparing the slides for my end-of-internship presentation on next Friday, 26th. It has been a lot of challenges, stress, learning and above all a huge personal growth! Some highlights of what I've learnt:</p>\n<p>✓ What is Taskcluster and how the AWS provisioner works (ok, there's still a lot to learn here).</p>\n<p>✓ What is an Azure entity and how to <a href=\"http://anarute.com/the-amiset-entity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create one</a>.</p>\n<p>✓ How to run an application with no GUI interface and how to test things with <a href=\"http://mochajs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mocha</a> - and accept that some things we just <em>can't</em> see, but they work!</p>\n<p>✓ How to build a <a href=\"http://anarute.com/how-to-manage-ami-sets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React app</a> - I didn't build it from scratch but I definitely learnt a lot here.</p>\n<p>✓ Ask for help soon instead of wasting hours and hours stuck on a small issue (such as a typo).</p>\n<p>✓ Receiving a lot of comments and critics in your PR can actually be a good thing and an opportunity to learn.</p>\n<p>✓ Not be afraid of making mistakes and make <em>stupid</em> questions - there's no such thing as a stupid question.</p>\n<p>✓ How to work in a completely remote team and actually be very productive.</p>\n<p>✓ Got so many great tips from powerful women with the Women in Tech series sessions (thanks to everyone involved to make this happen).</p>\n<p>Beyond all the technical and professional things, I also had a lot of fun! I had the opportunity to go to London and have the experience of what if feels like to be a Mozillian. I met so many awesome people on this path that I can only say thank you!</p>\n<p>Mostly thanks to Dustin, an awesome person who I had the privilege of having as my mentor during this period. Thank you, Dustin, for teaching me so much in so little time! For being a great career advisor, for pushing me when I wasn't confident about myself and for being a friend. Selena, you became a role model for me! I'm lucky I had the chance to meet you and to have you as our team leader. Kristel, it was awesome to meet you and share my challenges and frustrations with you, you are a very strong person, I hope you the best, always. Wander, always ready to help me when I didn't wake up in a good relationship with English words, I'm glad to call you a friend now, for sure we are going to meet a lot here in Brazil. Thanks, John and Eli for the code reviews - I learnt a lot with them. Andrea and Hassan, it was nice to meet you in London, we had a great time! Greg, I wish you the best on your new role on the team, you are already doing a great job! Pete, Jonas and Brian, unfortunately, we didn't have the chance to work much together but I could see how much effort and dedication you all put on Taskcluster, it's really inspiring!</p>\n<p>Thank you, Taskcluster team, it was a pleasure to work with you all. Such a passionate and highly skilled team. I learnt a lot with all of you!</p>\n<p><img src=\"/images/posts/plops-1.jpg\" alt=\"Platform Operations team at London All Hands\"></p>\n<p>PS.: If you are reading this and intend to apply to Outreachy, please do it, you won't regret it! Feel free to ask for help or tips at anarutecvm at gmail dot com.</p>\n","excerpt":"","description":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla"}]}},{"node":{"id":"b653b66d9ceafa2418e00990ffd4c7bb","title":"How to manage AMI sets","datetime":"2016-07-22 14:30:43","path":"/how-to-manage-ami-sets","content":"<p>After finishing the first version of the <a href=\"http://anarute.com/the-amiset-entity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AMI sets entity</a>, now we need to be able to manage them.</p>\n<p>Taskcluster has already a set of tools to manage its components and elements: the <a href=\"https://tools.taskcluster.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">taskcluster tools</a>. In order to manage the AMI sets it was natural to build a tool for that. At first, our main goal is to build a minimal tool that allows us to list all the AMI sets known to the AWS provisioner and to add, edit and delete AMI sets.</p>\n<p>The final shape of an AMI set is this:</p>\n<pre>\"amis\": \n  [\n    {\n      \"region\": \"us-west-1\",\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n    }\n  ]\n</pre>\n<p>The ideal way to manage this is to allow the user to edit each field separately and check if the AMIs are valid automatically, but for now we are editing it as a JSON object since the back end already checks if the data is valid.</p>\n<p>The taskcluster tools are built with <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> and before this project I have never built anything with it. So to start, there's no better way than compare how all the other tools are built. I knew that I needed to figure out how to list the amiSets and how to embed a code editor to be used to edit and create amiSets, so my main examples were the <a href=\"https://tools.taskcluster.net/auth/roles/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Roles tool</a> and the text editor from <a href=\"https://tools.taskcluster.net/task-creator/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Task Creator tool</a>. The editor used in taskcluster tools is <a href=\"http://codemirror.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeMirror,</a> a text editor built in javascript for the browser.</p>\n<p>My first step was to build the add amiSet function - after all, without amiSets I cannot test any other endpoint. I started to see progress when apparently no errors showed up when trying to add an amiSet, but to check if it really worked I needed the listing function, then the view function. After making this work, edit and delete were the final ones. A <a href=\"https://github.com/taskcluster/taskcluster-tools/pull/121\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">first version</a> is already being reviewed and hopefully it will be published soon. We still have a lot of improvements to make but it seems good enough to move forward and start to incorporate the amiSets in the AWS provisioner architecture.</p>\n<p>Even after testing the AMI sets entity endpoints in the back end, I wasn't sure if it was really working because I could only see that it passed the tests that I have built, but I couldn't really see the amiSets (<em>and I must say I'm a very visual person</em>) but now with the tool I finally can see them, and it is grateful to see that what you're doing is working! - until it breaks something, of course.</p>\n","excerpt":"","description":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla"}]}},{"node":{"id":"437cfbeb0ed8dc8f278f64eb59e0357d","title":"The AmiSet Entity","datetime":"2016-06-10 14:30:43","path":"/the-amiset-entity","content":"<p>Taskcluster is a complex and big project and I'm working on a specific part of it: where we manage the Amazon instances and Machine Images (AMIs). As I've mentioned in my <a href=\"http://anarute.com/getting-started-with-taskcluster/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">last post</a>, my job here starts by creating a new database entity called AMI set, which stores sets of AMIs keyed by region and virtualization type.</p>\n<p>My work during the last two weeks were to understand how the AWS provisioner project is organized and how to create a new entity. Since I was creating something I knew nothing about, start coding seems to be the hardest part because I have no references of things I've done before and I need to learn basically everything. A good advice for newbies would be to chop everything into the smallest parts we can (I think this fits for almost every job and area).</p>\n<p>I took the Worker Type entity as my starting point as suggested by <a href=\"http://code.v.igoro.us/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dustin</a> - my mentor - and wrote the AMI Set entity definition by checking what I could replicate from WorkerType and discarding what didn't make sense. Which ended up with this basic definition:</p>\n<pre>let AmiSet = base.Entity.configure({\n\nproperties: {\n    id: base.Entity.types.String,\n    amis: base.Entity.types.JSON,\n    // Store the date of last modification for this entity\n    lastModified: base.Entity.types.Date,\n  },\n});\n</pre>\n<p>This is a very simple entity and its core part is the <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">amis</code> property, which needs to store the AMIs by region and virtualization type. The thing is, since it is a \"generic\" JSON object we need to decide how the object will be. We have mainly two options:</p>\n<pre>{\n   \"us-west-1\": {\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n  },\n   \"us-east-1\": {\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n  }\n}\n</pre>\n<p>Or</p>\n<pre>[\n   {\n      \"region\": \"us-west-1\",\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n   },\n   {\n      \"region\": \"us-east-1\",\n      \"hvm\": \"ami-111\",\n      \"pv\": \"ami-222\"\n   }\n]\n</pre>\n<p>As <a href=\"https://github.com/taskcluster/aws-provisioner/pull/85#discussion-diff-66091884\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@jhford pointed and @djmitche agrees</a>:</p>\n<blockquote>\n<p>Whether we have a list of objects or a straight mapping is something that you'll have to pick. A list of objects is really nice because you can do really neat things with <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Array.prototype.map</code> and <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Array.prototype.filter</code>. A mapping is really nice because it's easier to address the values and it is impossible to have duplicates. Error checking with the object will be easier, but the list of objects is more in line with what we do elsewhere in the provisioner and probably what I'd prefer to see.</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Here</a> we can see more methods that we can do with <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">Array.prototype</code>. As explained above, probably we'll go with the list of objects option.</p>\n<p>After creating the entity I started adding its create and delete endpoints. The hardest part this time was to understand the functions and specially if I was dealing with instances, classes or properties.</p>\n<p>The thing that made me learn the most were <a href=\"https://github.com/taskcluster/aws-provisioner/pull/85\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the comments</a> Dustin and John made in my Pull Request. It is really helpful to know the things you are doing right or wrong and to know where to go from there. So an important advice here is to start sending patches as soon as possible and don't fear making mistakes - they will happen anyway and we can only learn from them.</p>\n","excerpt":"","description":"","tags":[{"id":"outreachy","title":"outreachy","path":"/tag/outreachy"},{"id":"FOSS","title":"FOSS","path":"/tag/FOSS"},{"id":"taskcluster","title":"taskcluster","path":"/tag/taskcluster"},{"id":"Mozilla","title":"Mozilla","path":"/tag/Mozilla"}]}}]}}},"context":{}}
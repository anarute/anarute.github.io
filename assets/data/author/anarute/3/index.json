{"hash":"752c6ce69aa6bc2761e11346ad248f842b46c834","data":{"author":{"id":"anarute","title":"anarute","path":"/author/anarute/","belongsTo":{"totalCount":14,"pageInfo":{"totalPages":3,"currentPage":3},"edges":[{"node":{"id":"5a7842294d21f6e3854895ccd461dc11","title":"Preciso modificar um commit passado, como faz?","datetime":"2014-03-23 14:30:43","path":"/preciso-modificar-um-commit-passado-como-faz/","content":"<blockquote>\n<p>Nas últimas duas semanas tenho tido um intensivão de aprendizado de git por causa da reformulação do site da <a href=\"http://mupi.me\" title=\"Escola Mupi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Escola Mupi</a>. O projeto usa como base uma plataforma que se chama <a href=\"https://github.com/hacklabr/timtec\" title=\"Timtec\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Timtec</a>, mas que ainda está sendo desenvolvida, logo muitos bugs, features faltando e muitos <em>merge conflicts</em>... Eu que ainda estou descobrindo as magias do git, tenho uma relacionamento de amor e ódio, pois já fiz muita besteira e perdi muitas horas de trabalho por não saber como ele funciona direito, assim como ele já me salvou muitas vezes &#x3C;3</p>\n<p>Esses dias, precisei adicionar alguns arquivos num commit antigo para manter minha árvore organizada e coerente. Para isso, <a href=\"http://padovan.org\" title=\"Gustavo Padovan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@padovan</a> me ensinou a resolver esse problema usando <strong>fixup</strong> + <strong>rebase interactive</strong> [que eu particularmente achei incrível]. Vamos lá:</p>\n</blockquote>\n<p>Antes de iniciar, você precisa copiar um pedaço inicial do hash do commit que você deseja modificar. O hash é o código de identificação do commit, exemplo: 636bf2643e67bf34f67691333b916e292571a469. No caso os 6 primeiros caracteres já são suficientes. Você pode achar o hash com o comando <span style=\"color: #800000;\"><code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git log</code></span>.</p>\n<p>Tendo isso copiado, deve-se fazer um \"fake\" commit. Ou seja, criamos um commit que servirá apenas como um repositório temporário das novas modificações que serão acrescentadas ao commit desejado. Para isso usamos o seguinte comando:</p>\n<pre>$ git commit --fixup=636bf26</pre>\n<p>Isso cria um commit com a mensagem \"fixup! + msg do commit selecionado\". Isso ajuda a identificar que esse não é um commit convencional, mas que precisa ser \"fixed up\". Feito isso, agora vem a magia: <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase --interactive</code> ou <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git rebase -i</code>. O rebase interactive dá muito mais flexibilidade para modificar os commits. Para usá-lo precisamos indicar a quantidade de últimos commits a serem mostrados a partir do HEAD. No meu caso, os 4 últimos commits foram suficientes:</p>\n<pre>$ git rebase -i HEAD~4</pre>\n<p>que nos dá no editor padrão do terminal a quantidade indicada de commits em ordem do mais antigo ao mais novo, assim como todas as opções do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">rebase interactive</code>. Nesse exemplo só vamos utilizar fixup (note que existem outras opções pra rebase interativo que podem ser muito úteis em outras situações):</p>\n<p><img src=\"http://i.imgur.com/U0abklc.png\"></p>\n<p>Para a magia acontecer, é preciso escrever <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">f</code> no lugar de <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pick</code> na frente do commit de fixup e modificar a ordem dos commits, colocando-o logo abaixo do commit desejado:</p>\n<p><img src=\"http://i.imgur.com/qb8mwCx.png\"></p>\n<p>Agora é só salvar e voi lá! o \"fake\" commit é fundido no commit de cima =) é só dar um checada se deu tudo certo com git log.</p>\n<p>UPDATE: Como pode se ver na primeira imagem, existem outras opções bem interessantes para se usar no rebase interativo, como o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">reword</code>, que permite modificar apenas a mensagem de algum commit, e o <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">squash</code> que permite juntar dois ou mais commits em um só. Para quem lê em inglês, sugiro <a href=\"https://help.github.com/articles/interactive-rebase\" title=\"Interactive rebase\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">este artigo</a> do github a respeito e dou um quote de alerta (tradução livre minha): \"É considerada uma má prática dar rebase em commits que já foram submetidos ao repositório remoto. Ao fazer isso, você poderá invocar a ira dos deuses do git\".</p>\n<p>obs.: Para modificar o último commit feito, <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">git commit --amend</code> é a melhor opção, já que \"reabre\" o último commit para edição.</p>\n","excerpt":"","description":"Aprenda a usar rebase interativo para modificar um commit do passado","tags":[{"id":"git","title":"git","path":"/tag/git/"}]}},{"node":{"id":"c1e2088a18deec6f70842f354c8c2293","title":"Learn how to code Javascript by playing a game!","datetime":"2014-02-08 14:30:43","path":"/learn-javascript-playing/","content":"<p><a href=\"http://codecombat.com/\" title=\"CodeCombat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CodeCombat</a> is a web based game that teaches you how to code with Javascript by playing it and so far, the more I get to know it the more I like it!</p>\n<p><img src=\"http://i.imgur.com/GSuX3la.png\"></p>\n<p>The game has a 2D RPG skin with cute characters and runs directly in the browser. At the beginning it is a bit hard to get used to its UX and for those who are anxious, sorry to tell, but you will have to read the instructions. But when you start to get how it works it gets more fun and without noticing you are learning how to code and hacking the code they give you in order to pass the levels faster.</p>\n<p>The better part of Codecombat I just found out yesterday: the team who built it has <a href=\"http://blog.codecombat.com/we-have-open-sourced-everything\" title=\"Codecombat - We&#x27;ve Open-Sourced Everything\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">open-sourced everything</a>! I have even talked with the team and they are super accessible, they have provided a <a href=\"https://github.com/codecombat/codecombat/wiki/Developer-organization#wiki-communication\" title=\"Developer Organization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">few aways of doing that</a>.</p>\n<p>There are a <a href=\"http://codecombat.com/contribute\" title=\"Contribute to Codecombat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bunch of ways to get involved</a> with the game and helping spread code education out there. So, if you are looking for a free and open-source software to contribute, you should consider this one.</p>\n","excerpt":"","description":"CodeCombat is a web based game that teaches you how to code with Javascript by playing it and so far, the more I get to know it the more I like it!","tags":[{"id":"javascript","title":"javascript","path":"/tag/javascript/"},{"id":"learning","title":"learning","path":"/tag/learning/"},{"id":"code","title":"code","path":"/tag/code/"}]}}]}}},"context":{}}